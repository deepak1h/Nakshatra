{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"readme.md":{"content":"# Nakshatra - Celestial Astrology Platform\n\n## Overview\n\nNakshatra is a comprehensive full-stack astrology web application that combines traditional Vedic astrology with modern technology. The platform offers personalized Kundali (birth chart) readings, an e-commerce store for celestial products, and an AI-powered astrological chatbot. Built with a cosmic-themed design featuring deep blues, purples, and golds, the application provides users with spiritual guidance and astrological insights through multiple service channels.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built using **React with TypeScript** and employs a component-based architecture. The application uses **Vite** as the build tool and development server, providing fast hot module replacement and optimized builds. The UI framework is **shadcn/ui** with **Radix UI** primitives for accessible components, styled with **Tailwind CSS** for a cosmic-themed design system.\n\n**State Management**: The application uses React Context for global state (CartContext) and **TanStack Query (React Query)** for server state management, providing efficient data fetching, caching, and synchronization.\n\n**Routing**: Implemented with **Wouter**, a lightweight client-side routing solution that provides navigation without the overhead of larger routing libraries.\n\n**Styling**: A comprehensive design system using CSS custom properties for theming, with cosmic color variables (cosmic-navy, cosmic-purple, cosmic-gold) and typography using Inter and Playfair Display fonts.\n\n### Backend Architecture\nThe server-side follows a **REST API architecture** built with **Express.js and TypeScript**. The application uses a modular approach with separate files for routes, storage operations, and external service integrations.\n\n**API Structure**: RESTful endpoints organized by feature domains:\n- Products API (`/api/products`)\n- Orders API (`/api/orders`) \n- Kundali requests (`/api/kundali`)\n- Chat functionality (`/api/chat`)\n- Contact forms (`/api/contact`)\n\n**Service Layer**: Dedicated service modules for AI integration (Gemini AI) and business logic separation from routing concerns.\n\n**Error Handling**: Centralized error handling middleware with proper HTTP status codes and structured error responses.\n\n### Data Storage Solutions\n**Database**: PostgreSQL with **Drizzle ORM** for type-safe database operations and schema management. The database is hosted on **Neon** (serverless PostgreSQL).\n\n**Schema Design**: Well-structured relational database with tables for:\n- Users (authentication and profile data)\n- Products (e-commerce catalog)\n- Orders and OrderItems (transaction management)\n- KundaliRequests (astrology service orders)\n- ChatMessages (AI conversation history)\n- ContactMessages (customer inquiries)\n\n**Database Features**: Uses UUID primary keys, proper foreign key relationships, JSON fields for complex data (shipping addresses), and timestamp tracking for audit trails.\n\n### Authentication and Authorization\nThe application architecture supports user authentication through a users table schema, though the specific authentication implementation (sessions, JWT, OAuth) is not explicitly defined in the current codebase. The system is designed to handle user-specific data and personalized experiences.\n\n## External Dependencies\n\n### AI Integration\n**Google Gemini AI**: Integrated through `@google/genai` for the AstroAI chat feature. Provides personalized astrological guidance with a specialized system prompt that ensures responses are mystical, accurate, and empathetic while staying within astrological domain expertise.\n\n### Payment Processing\n**Stripe**: Full integration with `@stripe/stripe-js` and `@stripe/react-stripe-js` for secure payment processing of Kundali orders and product purchases.\n\n**PayPal**: Alternative payment processing through `@paypal/paypal-server-sdk` for additional payment flexibility.\n\n### Database and Hosting\n**Neon Database**: Serverless PostgreSQL hosting with connection pooling through `@neondatabase/serverless`.\n\n**Drizzle Kit**: Database migration and schema management tools for maintaining database structure.\n\n### Development and Build Tools\n**Vite**: Modern build tool with React plugin for development and production builds.\n\n**Replit Integration**: Development environment integration with error overlays and cartographer plugin for Replit-specific features.\n\n### UI and Styling\n**Radix UI**: Comprehensive set of accessible, unstyled UI primitives for building the component library.\n\n**Tailwind CSS**: Utility-first CSS framework with custom theme configuration for the cosmic design system.\n\n**Lucide React**: Icon library providing consistent iconography throughout the application.\n\n### Form and Data Management\n**React Hook Form**: Efficient form state management with validation through `@hookform/resolvers`.\n\n**Zod**: Runtime type validation and schema validation for API endpoints and form data.\n\n**TanStack Query**: Server state management with caching, background updates, and optimistic updates.","size_bytes":5147},"replit.md":{"content":"# Nakshatra - Celestial Astrology Platform\n\n## Overview\n\nNakshatra is a comprehensive full-stack astrology web application that combines traditional Vedic astrology with modern technology. The platform offers personalized Kundali (birth chart) readings, an e-commerce store for celestial products, and an AI-powered astrological chatbot. Built with a cosmic-themed design featuring deep blues, purples, and golds, the application provides users with spiritual guidance and astrological insights through multiple service channels.\n\n## Recent Changes\n\n**September 28, 2025**: Successfully imported and configured for Replit environment\n- Migrated database configuration from Neon serverless to local PostgreSQL\n- Fixed SSL certificate issues in database connectivity  \n- Configured Vite dev server to work with Replit proxy (host: 0.0.0.0, port: 5000)\n- Set up development workflow for seamless frontend/backend integration\n- Configured deployment settings for production (VM target)\n- All API endpoints verified working (products, auth, promotional banners)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built using **React with TypeScript** and employs a component-based architecture. The application uses **Vite** as the build tool and development server, providing fast hot module replacement and optimized builds. The UI framework is **shadcn/ui** with **Radix UI** primitives for accessible components, styled with **Tailwind CSS** for a cosmic-themed design system.\n\n**State Management**: The application uses React Context for global state (CartContext) and **TanStack Query (React Query)** for server state management, providing efficient data fetching, caching, and synchronization.\n\n**Routing**: Implemented with **Wouter**, a lightweight client-side routing solution that provides navigation without the overhead of larger routing libraries.\n\n**Styling**: A comprehensive design system using CSS custom properties for theming, with cosmic color variables (cosmic-navy, cosmic-purple, cosmic-gold) and typography using Inter and Playfair Display fonts.\n\n### Backend Architecture\nThe server-side follows a **REST API architecture** built with **Express.js and TypeScript**. The application uses a modular approach with separate files for routes, storage operations, and external service integrations.\n\n**API Structure**: RESTful endpoints organized by feature domains:\n- Products API (`/api/products`)\n- Orders API (`/api/orders`) \n- Kundali requests (`/api/kundali`)\n- Chat functionality (`/api/chat`)\n- Contact forms (`/api/contact`)\n\n**Service Layer**: Dedicated service modules for AI integration (Gemini AI) and business logic separation from routing concerns.\n\n**Error Handling**: Centralized error handling middleware with proper HTTP status codes and structured error responses.\n\n### Data Storage Solutions\n**Database**: PostgreSQL with **Drizzle ORM** for type-safe database operations and schema management. The database is hosted on **Neon** (serverless PostgreSQL).\n\n**Schema Design**: Well-structured relational database with tables for:\n- Users (authentication and profile data)\n- Products (e-commerce catalog)\n- Orders and OrderItems (transaction management)\n- KundaliRequests (astrology service orders)\n- ChatMessages (AI conversation history)\n- ContactMessages (customer inquiries)\n\n**Database Features**: Uses UUID primary keys, proper foreign key relationships, JSON fields for complex data (shipping addresses), and timestamp tracking for audit trails.\n\n### Authentication and Authorization\nThe application architecture supports user authentication through a users table schema, though the specific authentication implementation (sessions, JWT, OAuth) is not explicitly defined in the current codebase. The system is designed to handle user-specific data and personalized experiences.\n\n## External Dependencies\n\n### AI Integration\n**Google Gemini AI**: Integrated through `@google/genai` for the AstroAI chat feature. Provides personalized astrological guidance with a specialized system prompt that ensures responses are mystical, accurate, and empathetic while staying within astrological domain expertise.\n\n### Payment Processing\n**Stripe**: Full integration with `@stripe/stripe-js` and `@stripe/react-stripe-js` for secure payment processing of Kundali orders and product purchases.\n\n**PayPal**: Alternative payment processing through `@paypal/paypal-server-sdk` for additional payment flexibility.\n\n### Database and Hosting\n**Neon Database**: Serverless PostgreSQL hosting with connection pooling through `@neondatabase/serverless`.\n\n**Drizzle Kit**: Database migration and schema management tools for maintaining database structure.\n\n### Development and Build Tools\n**Vite**: Modern build tool with React plugin for development and production builds.\n\n**Replit Integration**: Development environment integration with error overlays and cartographer plugin for Replit-specific features.\n\n### UI and Styling\n**Radix UI**: Comprehensive set of accessible, unstyled UI primitives for building the component library.\n\n**Tailwind CSS**: Utility-first CSS framework with custom theme configuration for the cosmic design system.\n\n**Lucide React**: Icon library providing consistent iconography throughout the application.\n\n### Form and Data Management\n**React Hook Form**: Efficient form state management with validation through `@hookform/resolvers`.\n\n**Zod**: Runtime type validation and schema validation for API endpoints and form data.\n\n**TanStack Query**: Server state management with caching, background updates, and optimistic updates.","size_bytes":5674},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        cosmic: {\n          navy: \"var(--cosmic-navy)\",\n          purple: \"var(--cosmic-purple)\",\n          gold: \"var(--cosmic-gold)\",\n          silver: \"var(--cosmic-silver)\",\n          grey: \"var(--cosmic-grey)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeInUp: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        fadeInUp: \"fadeInUp 0.3s ease-out\",\n      },\n      backgroundImage: {\n        \"cosmic-gradient\": \"linear-gradient(135deg, var(--cosmic-navy) 0%, var(--cosmic-purple) 50%, var(--cosmic-navy) 100%)\",\n        \"hero-cosmic\": \"radial-gradient(circle at 20% 50%, var(--cosmic-purple) 0%, transparent 50%), radial-gradient(circle at 80% 20%, var(--cosmic-navy) 0%, transparent 50%), radial-gradient(circle at 40% 80%, var(--cosmic-navy) 0%, transparent 50%)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3052},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1008},"server/app.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Register routes\nregisterRoutes(app);\n\n// Error handler\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || \"Internal Server Error\";\n  res.status(status).json({ message });\n  throw err;\n});\n\n// Static vs Vite (only run Vite locally)\nif (app.get(\"env\") === \"development\") {\n  setupVite(app);\n} else {\n  serveStatic(app);\n}\n\nexport default app;\n","size_bytes":1503},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: false // Disable SSL for local development\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":486},"server/index.ts":{"content":"import app from \"./app\";\nimport { log } from \"./vite\";\n\nconst port = parseInt(process.env.PORT || \"5000\", 10);\n\napp.listen(port, \"0.0.0.0\", () => {\n  log(`serving on port ${port}`);\n});\n","size_bytes":186},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { getAstrologicalResponse, generateKundaliSummary } from \"./services/gemini\";\nimport { \n  insertProductSchema, \n  insertOrderSchema, \n  insertKundaliRequestSchema, \n  insertChatMessageSchema, \n  insertContactMessageSchema,\n  insertLikedProductSchema,\n  insertUserCartSchema,\n  insertPromotionalBannerSchema,\n  registerSchema,\n  loginSchema,\n  changePasswordSchema,\n  type User\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\n// Session configuration\nconst pgStore = connectPg(session);\nconst sessionStore = new pgStore({\n  conString: process.env.DATABASE_URL,\n  createTableIfMissing: true,\n  ttl: 7 * 24 * 60 * 60, // 7 days\n});\n\n// Authentication middleware\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    isAdmin?: boolean;\n    adminUsername?: string;\n  }\n}\n\nasync function requireAuth(req: any, res: any, next: any) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  \n  try {\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      req.session.destroy();\n      return res.status(401).json({ message: \"User not found\" });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error(\"Auth middleware error:\", error);\n    return res.status(500).json({ message: \"Authentication error\" });\n  }\n}\n\nasync function optionalAuth(req: any, res: any, next: any) {\n  if (req.session?.userId) {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        req.user = user;\n      }\n    } catch (error) {\n      console.error(\"Optional auth error:\", error);\n    }\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(session({\n    store: sessionStore,\n    secret: process.env.SESSION_SECRET || 'nakshatra-secret-key-change-this',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  }));\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 12);\n\n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      // Create session\n      (req.session as any).userId = user.id;\n      await storage.updateLastLogin(user.id);\n\n      // Return user without password\n      const { password, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      // Find user\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.password) {\n        return res.status(400).json({ message: \"Invalid email or password\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: \"Invalid email or password\" });\n      }\n\n      // Create session\n      (req.session as any).userId = user.id;\n      await storage.updateLastLogin(user.id);\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      req.session.destroy(() => {\n        res.json({ message: \"Logged out successfully\" });\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const { password, ...userWithoutPassword } = req.user!;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to get user info\" });\n    }\n  });\n\n  app.post(\"/api/auth/change-password\", requireAuth, async (req, res) => {\n    try {\n      const { currentPassword, newPassword } = changePasswordSchema.parse(req.body);\n      \n      const user = req.user!;\n      if (!user.password) {\n        return res.status(400).json({ message: \"Password not set\" });\n      }\n\n      // Verify current password\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 12);\n\n      // Update password\n      await storage.updateUser(user.id, { password: hashedNewPassword });\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      console.error(\"Change password error:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Admin Authentication\n  function requireAdmin(req: any, res: any, next: any) {\n    if (!req.session?.isAdmin) {\n      return res.status(401).json({ message: \"Admin authentication required\" });\n    }\n    next();\n  }\n\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      // Hardcoded admin credentials\n      if (username === \"admin\" && password === \"admin123\") {\n        (req.session as any).isAdmin = true;\n        (req.session as any).adminUsername = username;\n        res.json({ \n          success: true, \n          admin: { username: \"admin\", role: \"administrator\" } \n        });\n      } else {\n        res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Admin login failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", async (req, res) => {\n    try {\n      if (req.session) {\n        (req.session as any).isAdmin = false;\n        (req.session as any).adminUsername = null;\n      }\n      res.json({ message: \"Admin logged out successfully\" });\n    } catch (error) {\n      console.error(\"Admin logout error:\", error);\n      res.status(500).json({ message: \"Admin logout failed\" });\n    }\n  });\n\n  app.get(\"/api/admin/me\", async (req, res) => {\n    try {\n      if (req.session?.isAdmin) {\n        res.json({ \n          admin: { \n            username: req.session.adminUsername || \"admin\", \n            role: \"administrator\" \n          } \n        });\n      } else {\n        res.status(401).json({ message: \"Not authenticated as admin\" });\n      }\n    } catch (error) {\n      console.error(\"Admin auth check error:\", error);\n      res.status(500).json({ message: \"Admin auth check failed\" });\n    }\n  });\n\n  // Products API\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const products = category \n        ? await storage.getProductsByCategory(category)\n        : await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Admin Products API\n  app.post(\"/api/admin/products\", requireAdmin, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/admin/products/:id\", requireAdmin, async (req, res) => {\n    try {\n      const productData = req.body;\n      const product = await storage.updateProduct(req.params.id, productData);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/admin/products/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Admin Orders API\n  app.get(\"/api/admin/orders\", requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.put(\"/api/admin/orders/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { status, trackingId, courierPartner, description } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status, trackingId, courierPartner, description);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  // Orders API\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(orderData);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.post(\"/api/order-items\", async (req, res) => {\n    try {\n      const orderItemData = req.body;\n      const orderItem = await storage.createOrderItem(orderItemData);\n      res.json(orderItem);\n    } catch (error) {\n      console.error(\"Error creating order item:\", error);\n      res.status(500).json({ message: \"Failed to create order item\" });\n    }\n  });\n\n  // Kundali API\n  app.post(\"/api/kundali\", async (req, res) => {\n    try {\n      const kundaliData = insertKundaliRequestSchema.parse(req.body);\n      const request = await storage.createKundaliRequest(kundaliData);\n      \n      // Generate AI summary for the request\n      try {\n        const summary = await generateKundaliSummary({\n          fullName: kundaliData.fullName,\n          birthDate: kundaliData.birthDate,\n          birthTime: kundaliData.birthTime,\n          birthPlace: kundaliData.birthPlace,\n          gender: kundaliData.gender,\n        });\n        \n        res.json({ \n          ...request, \n          aiSummary: summary \n        });\n      } catch (aiError) {\n        console.error(\"AI summary generation failed:\", aiError);\n        res.json(request);\n      }\n    } catch (error) {\n      console.error(\"Error creating Kundali request:\", error);\n      res.status(500).json({ message: \"Failed to create Kundali request\" });\n    }\n  });\n\n  // Chat API\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const { message, userId } = req.body;\n      \n      if (!message) {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // Store user message\n      if (userId) {\n        await storage.createChatMessage({\n          userId,\n          message,\n          isFromUser: true,\n          response: null,\n        });\n      }\n\n      // Get AI response\n      const aiResponse = await getAstrologicalResponse(message);\n\n      // Store AI response\n      if (userId) {\n        await storage.createChatMessage({\n          userId,\n          message: aiResponse,\n          isFromUser: false,\n          response: null,\n        });\n      }\n\n      res.json({ response: aiResponse });\n    } catch (error) {\n      console.error(\"Error in chat:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  app.get(\"/api/chat/history/:userId\", async (req, res) => {\n    try {\n      const history = await storage.getChatHistory(req.params.userId);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  // Contact API\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const contactData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(contactData);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error creating contact message:\", error);\n      res.status(500).json({ message: \"Failed to send contact message\" });\n    }\n  });\n\n  // Seed initial products if needed\n  app.post(\"/api/seed-products\", async (req, res) => {\n    try {\n      const sampleProducts = [\n        {\n          name: \"Blue Sapphire Ring\",\n          description: \"Authentic Neelam for Saturn's blessings\",\n          price: \"12999.00\",\n          category: \"rings\",\n          imageUrl: \"https://images.unsplash.com/photo-1602173574767-37ac01994b2a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n          stock: 5,\n        },\n        {\n          name: \"Sri Yantra - Gold Plated\",\n          description: \"Sacred geometry for prosperity\",\n          price: \"3499.00\",\n          category: \"yantras\",\n          imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n          stock: 10,\n        },\n        {\n          name: \"Healing Crystal Set\",\n          description: \"7 chakra balancing stones\",\n          price: \"2199.00\",\n          category: \"stones\",\n          imageUrl: \"https://pixabay.com/get/g815d14118c29afb10d6d11e272db22518d7ad8ccb63773474af24d83ace503826cfdcbaf760b5840fadd8be12e2ad648330ca27948c943f11aad1b024541f618_1280.jpg\",\n          stock: 15,\n        },\n        {\n          name: \"Vedic Astrology Guide\",\n          description: \"Complete handbook for beginners\",\n          price: \"899.00\",\n          category: \"books\",\n          imageUrl: \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n          stock: 20,\n        },\n        {\n          name: \"Natural Ruby Stone\",\n          description: \"Manikya for Sun's power\",\n          price: \"8999.00\",\n          category: \"stones\",\n          imageUrl: \"https://images.unsplash.com/photo-1573408301185-9146fe634ad0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n          stock: 3,\n        },\n        {\n          name: \"Om Silver Pendant\",\n          description: \"Sacred symbol protection\",\n          price: \"1599.00\",\n          category: \"accessories\",\n          imageUrl: \"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n          stock: 12,\n        },\n      ];\n\n      for (const product of sampleProducts) {\n        await storage.createProduct(product);\n      }\n\n      res.json({ message: \"Sample products created successfully\" });\n    } catch (error) {\n      console.error(\"Error seeding products:\", error);\n      res.status(500).json({ message: \"Failed to seed products\" });\n    }\n  });\n\n  // User management routes\n  \n  // Liked products routes\n  app.post(\"/api/user/liked-products\", requireAuth, async (req, res) => {\n    try {\n      const { productId } = req.body;\n      if (!productId) {\n        return res.status(400).json({ message: \"Product ID is required\" });\n      }\n\n      const likedProduct = await storage.addLikedProduct(req.user!.id, productId);\n      res.json(likedProduct);\n    } catch (error) {\n      console.error(\"Error adding liked product:\", error);\n      res.status(500).json({ message: \"Failed to add liked product\" });\n    }\n  });\n\n  app.delete(\"/api/user/liked-products/:productId\", requireAuth, async (req, res) => {\n    try {\n      await storage.removeLikedProduct(req.user!.id, req.params.productId);\n      res.json({ message: \"Product removed from liked products\" });\n    } catch (error) {\n      console.error(\"Error removing liked product:\", error);\n      res.status(500).json({ message: \"Failed to remove liked product\" });\n    }\n  });\n\n  app.get(\"/api/user/liked-products\", requireAuth, async (req, res) => {\n    try {\n      const likedProducts = await storage.getUserLikedProducts(req.user!.id);\n      res.json(likedProducts);\n    } catch (error) {\n      console.error(\"Error fetching liked products:\", error);\n      res.status(500).json({ message: \"Failed to fetch liked products\" });\n    }\n  });\n\n  app.get(\"/api/user/liked-products/:productId/check\", requireAuth, async (req, res) => {\n    try {\n      const isLiked = await storage.isProductLiked(req.user!.id, req.params.productId);\n      res.json({ isLiked });\n    } catch (error) {\n      console.error(\"Error checking liked product:\", error);\n      res.status(500).json({ message: \"Failed to check liked product\" });\n    }\n  });\n\n  // User cart routes\n  app.post(\"/api/user/cart\", requireAuth, async (req, res) => {\n    try {\n      const { productId, quantity = 1 } = req.body;\n      if (!productId) {\n        return res.status(400).json({ message: \"Product ID is required\" });\n      }\n\n      const cartItem = await storage.addToUserCart(req.user!.id, productId, quantity);\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      res.status(500).json({ message: \"Failed to add to cart\" });\n    }\n  });\n\n  app.get(\"/api/user/cart\", requireAuth, async (req, res) => {\n    try {\n      const cartItems = await storage.getUserCart(req.user!.id);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.put(\"/api/user/cart/:productId\", requireAuth, async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      if (!quantity || quantity < 1) {\n        return res.status(400).json({ message: \"Valid quantity is required\" });\n      }\n\n      const cartItem = await storage.updateCartQuantity(req.user!.id, req.params.productId, quantity);\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error updating cart quantity:\", error);\n      res.status(500).json({ message: \"Failed to update cart quantity\" });\n    }\n  });\n\n  app.delete(\"/api/user/cart/:productId\", requireAuth, async (req, res) => {\n    try {\n      await storage.removeFromUserCart(req.user!.id, req.params.productId);\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete(\"/api/user/cart\", requireAuth, async (req, res) => {\n    try {\n      await storage.clearUserCart(req.user!.id);\n      res.json({ message: \"Cart cleared\" });\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Order history route\n  app.get(\"/api/user/orders\", requireAuth, async (req, res) => {\n    try {\n      const orders = await storage.getOrdersByUser(req.user!.id);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching user orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch order history\" });\n    }\n  });\n\n  // Kundali history route  \n  app.get(\"/api/user/kundali-requests\", requireAuth, async (req, res) => {\n    try {\n      const requests = await storage.getKundaliRequestsByUser(req.user!.id);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching user kundali requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch kundali history\" });\n    }\n  });\n\n  // Promotional banners routes\n  app.get(\"/api/promotional-banners\", async (req, res) => {\n    try {\n      const position = req.query.position as string;\n      const banners = await storage.getActivePromotionalBanners(position);\n      res.json(banners);\n    } catch (error) {\n      console.error(\"Error fetching promotional banners:\", error);\n      res.status(500).json({ message: \"Failed to fetch promotional banners\" });\n    }\n  });\n\n  app.post(\"/api/promotional-banners\", async (req, res) => {\n    try {\n      const bannerData = insertPromotionalBannerSchema.parse(req.body);\n      const banner = await storage.createPromotionalBanner(bannerData);\n      res.json(banner);\n    } catch (error) {\n      console.error(\"Error creating promotional banner:\", error);\n      res.status(500).json({ message: \"Failed to create promotional banner\" });\n    }\n  });\n\n  // Add sample promotional banners\n  app.post(\"/api/seed-promotional-banners\", async (req, res) => {\n    try {\n      const sampleBanners = [\n        {\n          title: \"🌟 New Year Special - 30% Off All Gemstone Rings!\",\n          description: \"Start your cosmic journey with authentic gemstone rings. Limited time offer!\",\n          imageUrl: \"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?w=800&h=300&fit=crop\",\n          ctaText: \"Shop Now\",\n          ctaLink: \"/celestial-store?category=rings\",\n          discountCode: \"NEWYEAR30\",\n          discountPercent: 30,\n          validFrom: new Date(),\n          validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n          isActive: true,\n          position: \"top\",\n          priority: 10,\n        },\n        {\n          title: \"✨ Free Kundali Reading with Every Purchase Above ₹5000\",\n          description: \"Unlock your celestial blueprint with our expert astrologers\",\n          imageUrl: \"https://images.unsplash.com/photo-1518717758536-85ae29035b6d?w=800&h=300&fit=crop\",\n          ctaText: \"Learn More\",\n          ctaLink: \"/kundali\",\n          validFrom: new Date(),\n          validUntil: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 days\n          isActive: true,\n          position: \"banner\",\n          priority: 8,\n        },\n        {\n          title: \"🔮 AstroAI Chat - Get Instant Cosmic Guidance\",\n          description: \"Chat with our AI astrologer for personalized insights available 24/7\",\n          imageUrl: \"https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?w=800&h=300&fit=crop\",\n          ctaText: \"Start Chat\",\n          ctaLink: \"/astro-ai\",\n          validFrom: new Date(),\n          validUntil: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days\n          isActive: true,\n          position: \"sidebar\",\n          priority: 5,\n        },\n      ];\n\n      const createdBanners = [];\n      for (const banner of sampleBanners) {\n        const created = await storage.createPromotionalBanner(banner);\n        createdBanners.push(created);\n      }\n\n      res.json({ \n        message: \"Sample promotional banners created successfully\", \n        count: createdBanners.length,\n        banners: createdBanners \n      });\n    } catch (error) {\n      console.error(\"Error seeding promotional banners:\", error);\n      res.status(500).json({ message: \"Failed to seed promotional banners\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":24623},"server/storage.ts":{"content":"import {\n  users,\n  products,\n  orders,\n  orderItems,\n  kundaliRequests,\n  chatMessages,\n  contactMessages,\n  likedProducts,\n  userCart,\n  promotionalBanners,\n  userSessions,\n  type User,\n  type InsertUser,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type KundaliRequest,\n  type InsertKundaliRequest,\n  type ChatMessage,\n  type InsertChatMessage,\n  type ContactMessage,\n  type InsertContactMessage,\n  type LikedProduct,\n  type InsertLikedProduct,\n  type UserCart,\n  type InsertUserCart,\n  type PromotionalBanner,\n  type InsertPromotionalBanner,\n  type UserSession,\n  type InsertUserSession,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, lt, gte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  updateLastLogin(id: string): Promise<void>;\n  \n  // Product operations\n  getAllProducts(): Promise<Product[]>;\n  getProductsByCategory(category: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<void>;\n  updateProductStock(id: string, stock: number): Promise<void>;\n  \n  // Order operations\n  createOrder(order: InsertOrder): Promise<Order>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  getOrdersByUser(userId: string): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  updateOrderStatus(id: string, status: string, trackingId?: string, courierPartner?: string, description?: string): Promise<Order | undefined>;\n  \n  // Kundali operations\n  createKundaliRequest(request: InsertKundaliRequest): Promise<KundaliRequest>;\n  getKundaliRequestsByUser(userId: string): Promise<KundaliRequest[]>;\n  updateKundaliStatus(id: string, status: string, reportUrl?: string): Promise<void>;\n  \n  // Chat operations\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatHistory(userId: string): Promise<ChatMessage[]>;\n  \n  // Contact operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getAllContactMessages(): Promise<ContactMessage[]>;\n  \n  // Liked products operations\n  addLikedProduct(userId: string, productId: string): Promise<LikedProduct>;\n  removeLikedProduct(userId: string, productId: string): Promise<void>;\n  getUserLikedProducts(userId: string): Promise<Product[]>;\n  isProductLiked(userId: string, productId: string): Promise<boolean>;\n  \n  // User cart operations\n  addToUserCart(userId: string, productId: string, quantity: number): Promise<UserCart>;\n  removeFromUserCart(userId: string, productId: string): Promise<void>;\n  getUserCart(userId: string): Promise<(UserCart & { product: Product })[]>;\n  updateCartQuantity(userId: string, productId: string, quantity: number): Promise<UserCart>;\n  clearUserCart(userId: string): Promise<void>;\n  \n  // Promotional banners operations\n  getAllPromotionalBanners(): Promise<PromotionalBanner[]>;\n  getActivePromotionalBanners(position?: string): Promise<PromotionalBanner[]>;\n  createPromotionalBanner(banner: InsertPromotionalBanner): Promise<PromotionalBanner>;\n  \n  // User sessions operations\n  createUserSession(userId: string, sessionToken: string, expiresAt: Date): Promise<UserSession>;\n  getUserBySessionToken(sessionToken: string): Promise<User | undefined>;\n  deleteUserSession(sessionToken: string): Promise<void>;\n  deleteExpiredSessions(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateLastLogin(id: string): Promise<void> {\n    await db.update(users)\n      .set({ lastLoginAt: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  // Product operations\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.isActive, true));\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.category, category), eq(products.isActive, true)));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(insertProduct).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const [product] = await db.update(products)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(products.id, id));\n  }\n\n  async updateProductStock(id: string, stock: number): Promise<void> {\n    await db.update(products).set({ stock }).where(eq(products.id, id));\n  }\n\n  // Order operations\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const [order] = await db.insert(orders).values(insertOrder).returning();\n    return order;\n  }\n\n  async createOrderItem(insertOrderItem: InsertOrderItem): Promise<OrderItem> {\n    const [orderItem] = await db.insert(orderItems).values(insertOrderItem).returning();\n    return orderItem;\n  }\n\n  async getOrdersByUser(userId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async updateOrderStatus(id: string, status: string, trackingId?: string, courierPartner?: string, description?: string): Promise<Order | undefined> {\n    const updateData: any = { \n      status, \n      updatedAt: new Date() \n    };\n    \n    // Note: These fields would need to be added to the orders schema to fully support tracking\n    // For now, we'll just update the status\n    if (trackingId) {\n      // updateData.trackingId = trackingId; // Would need schema update\n    }\n    if (courierPartner) {\n      // updateData.courierPartner = courierPartner; // Would need schema update  \n    }\n    if (description) {\n      // updateData.description = description; // Would need schema update\n    }\n\n    const [order] = await db.update(orders)\n      .set(updateData)\n      .where(eq(orders.id, id))\n      .returning();\n    return order;\n  }\n\n  // Kundali operations\n  async createKundaliRequest(insertRequest: InsertKundaliRequest): Promise<KundaliRequest> {\n    const [request] = await db.insert(kundaliRequests).values(insertRequest).returning();\n    return request;\n  }\n\n  async getKundaliRequestsByUser(userId: string): Promise<KundaliRequest[]> {\n    return await db\n      .select()\n      .from(kundaliRequests)\n      .where(eq(kundaliRequests.userId, userId))\n      .orderBy(desc(kundaliRequests.createdAt));\n  }\n\n  async updateKundaliStatus(id: string, status: string, reportUrl?: string): Promise<void> {\n    const updateData: any = { status };\n    if (reportUrl) {\n      updateData.reportUrl = reportUrl;\n    }\n    await db.update(kundaliRequests).set(updateData).where(eq(kundaliRequests.id, id));\n  }\n\n  // Chat operations\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const [message] = await db.insert(chatMessages).values(insertMessage).returning();\n    return message;\n  }\n\n  async getChatHistory(userId: string): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.userId, userId))\n      .orderBy(chatMessages.createdAt);\n  }\n\n  // Contact operations\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const [message] = await db.insert(contactMessages).values(insertMessage).returning();\n    return message;\n  }\n\n  async getAllContactMessages(): Promise<ContactMessage[]> {\n    return await db\n      .select()\n      .from(contactMessages)\n      .orderBy(desc(contactMessages.createdAt));\n  }\n\n  // Liked products operations\n  async addLikedProduct(userId: string, productId: string): Promise<LikedProduct> {\n    const [likedProduct] = await db\n      .insert(likedProducts)\n      .values({ userId, productId })\n      .onConflictDoNothing()\n      .returning();\n    return likedProduct;\n  }\n\n  async removeLikedProduct(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(likedProducts)\n      .where(and(eq(likedProducts.userId, userId), eq(likedProducts.productId, productId)));\n  }\n\n  async getUserLikedProducts(userId: string): Promise<Product[]> {\n    const result = await db\n      .select({\n        id: products.id,\n        name: products.name,\n        description: products.description,\n        price: products.price,\n        category: products.category,\n        imageUrl: products.imageUrl,\n        stock: products.stock,\n        isActive: products.isActive,\n        createdAt: products.createdAt,\n        updatedAt: products.updatedAt,\n      })\n      .from(likedProducts)\n      .innerJoin(products, eq(likedProducts.productId, products.id))\n      .where(eq(likedProducts.userId, userId))\n      .orderBy(desc(likedProducts.createdAt));\n    return result;\n  }\n\n  async isProductLiked(userId: string, productId: string): Promise<boolean> {\n    const [result] = await db\n      .select({ count: likedProducts.id })\n      .from(likedProducts)\n      .where(and(eq(likedProducts.userId, userId), eq(likedProducts.productId, productId)));\n    return !!result;\n  }\n\n  // User cart operations\n  async addToUserCart(userId: string, productId: string, quantity: number): Promise<UserCart> {\n    // Check if item already exists in cart\n    const [existing] = await db\n      .select()\n      .from(userCart)\n      .where(and(eq(userCart.userId, userId), eq(userCart.productId, productId)));\n\n    if (existing) {\n      // Update quantity\n      const [updated] = await db\n        .update(userCart)\n        .set({ quantity: existing.quantity + quantity, updatedAt: new Date() })\n        .where(and(eq(userCart.userId, userId), eq(userCart.productId, productId)))\n        .returning();\n      return updated;\n    } else {\n      // Add new item\n      const [cartItem] = await db\n        .insert(userCart)\n        .values({ userId, productId, quantity })\n        .returning();\n      return cartItem;\n    }\n  }\n\n  async removeFromUserCart(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(userCart)\n      .where(and(eq(userCart.userId, userId), eq(userCart.productId, productId)));\n  }\n\n  async getUserCart(userId: string): Promise<(UserCart & { product: Product })[]> {\n    const result = await db\n      .select({\n        id: userCart.id,\n        userId: userCart.userId,\n        productId: userCart.productId,\n        quantity: userCart.quantity,\n        createdAt: userCart.createdAt,\n        updatedAt: userCart.updatedAt,\n        product: {\n          id: products.id,\n          name: products.name,\n          description: products.description,\n          price: products.price,\n          category: products.category,\n          imageUrl: products.imageUrl,\n          stock: products.stock,\n          isActive: products.isActive,\n          createdAt: products.createdAt,\n          updatedAt: products.updatedAt,\n        },\n      })\n      .from(userCart)\n      .innerJoin(products, eq(userCart.productId, products.id))\n      .where(eq(userCart.userId, userId))\n      .orderBy(desc(userCart.createdAt));\n    \n    return result.map(item => ({\n      ...item,\n      product: item.product,\n    }));\n  }\n\n  async updateCartQuantity(userId: string, productId: string, quantity: number): Promise<UserCart> {\n    const [updated] = await db\n      .update(userCart)\n      .set({ quantity, updatedAt: new Date() })\n      .where(and(eq(userCart.userId, userId), eq(userCart.productId, productId)))\n      .returning();\n    return updated;\n  }\n\n  async clearUserCart(userId: string): Promise<void> {\n    await db.delete(userCart).where(eq(userCart.userId, userId));\n  }\n\n  // Promotional banners operations\n  async getAllPromotionalBanners(): Promise<PromotionalBanner[]> {\n    return await db\n      .select()\n      .from(promotionalBanners)\n      .orderBy(desc(promotionalBanners.priority), desc(promotionalBanners.createdAt));\n  }\n\n  async getActivePromotionalBanners(position?: string): Promise<PromotionalBanner[]> {\n    const whereConditions = [\n      eq(promotionalBanners.isActive, true),\n      gte(promotionalBanners.validUntil, new Date())\n    ];\n\n    if (position) {\n      whereConditions.push(eq(promotionalBanners.position, position));\n    }\n\n    return await db\n      .select()\n      .from(promotionalBanners)\n      .where(and(...whereConditions))\n      .orderBy(desc(promotionalBanners.priority), desc(promotionalBanners.createdAt));\n  }\n\n  async createPromotionalBanner(insertBanner: InsertPromotionalBanner): Promise<PromotionalBanner> {\n    const [banner] = await db\n      .insert(promotionalBanners)\n      .values(insertBanner)\n      .returning();\n    return banner;\n  }\n\n  // User sessions operations\n  async createUserSession(userId: string, sessionToken: string, expiresAt: Date): Promise<UserSession> {\n    const [session] = await db\n      .insert(userSessions)\n      .values({ userId, sessionToken, expiresAt })\n      .returning();\n    return session;\n  }\n\n  async getUserBySessionToken(sessionToken: string): Promise<User | undefined> {\n    const [result] = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        password: users.password,\n        phone: users.phone,\n        dateOfBirth: users.dateOfBirth,\n        preferences: users.preferences,\n        isEmailVerified: users.isEmailVerified,\n        lastLoginAt: users.lastLoginAt,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n      })\n      .from(userSessions)\n      .innerJoin(users, eq(userSessions.userId, users.id))\n      .where(\n        and(\n          eq(userSessions.sessionToken, sessionToken),\n          gte(userSessions.expiresAt, new Date())\n        )\n      );\n    return result;\n  }\n\n  async deleteUserSession(sessionToken: string): Promise<void> {\n    await db.delete(userSessions).where(eq(userSessions.sessionToken, sessionToken));\n  }\n\n  async deleteExpiredSessions(): Promise<void> {\n    await db.delete(userSessions).where(lt(userSessions.expiresAt, new Date()));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15741},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  integer,\n  decimal,\n  timestamp,\n  boolean,\n  jsonb,\n  uuid,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  profileImageUrl: varchar(\"profile_image_url\", { length: 500 }),\n  password: varchar(\"password\", { length: 255 }), // For local auth\n  phone: varchar(\"phone\", { length: 20 }),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  preferences: jsonb(\"preferences\"), // Store user preferences like zodiac sign, interests\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  imageUrl: varchar(\"image_url\", { length: 500 }),\n  stock: integer(\"stock\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  shippingAddress: jsonb(\"shipping_address\"),\n  paymentStatus: varchar(\"payment_status\", { length: 50 }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id),\n  productId: uuid(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Kundali requests table\nexport const kundaliRequests = pgTable(\"kundali_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  fullName: varchar(\"full_name\", { length: 255 }).notNull(),\n  gender: varchar(\"gender\", { length: 20 }).notNull(),\n  birthDate: timestamp(\"birth_date\").notNull(),\n  birthTime: varchar(\"birth_time\", { length: 10 }).notNull(),\n  birthPlace: varchar(\"birth_place\", { length: 255 }).notNull(),\n  fatherName: varchar(\"father_name\", { length: 255 }),\n  kundaliType: varchar(\"kundali_type\", { length: 100 }).notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"),\n  reportUrl: varchar(\"report_url\", { length: 500 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chat messages table\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  message: text(\"message\").notNull(),\n  response: text(\"response\"),\n  isFromUser: boolean(\"is_from_user\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contact messages table\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  subject: varchar(\"subject\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"unread\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Liked products table\nexport const likedProducts = pgTable(\"liked_products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  productId: uuid(\"product_id\").references(() => products.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  userProductIndex: index().on(table.userId, table.productId),\n}));\n\n// User cart table (persistent cart for logged in users)\nexport const userCart = pgTable(\"user_cart\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  productId: uuid(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  userProductIndex: index().on(table.userId, table.productId),\n}));\n\n// Promotional banners table\nexport const promotionalBanners = pgTable(\"promotional_banners\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\", { length: 500 }),\n  ctaText: varchar(\"cta_text\", { length: 100 }),\n  ctaLink: varchar(\"cta_link\", { length: 500 }),\n  discountCode: varchar(\"discount_code\", { length: 50 }),\n  discountPercent: integer(\"discount_percent\"),\n  validFrom: timestamp(\"valid_from\"),\n  validUntil: timestamp(\"valid_until\"),\n  isActive: boolean(\"is_active\").default(true),\n  position: varchar(\"position\", { length: 50 }).default(\"top\"), // top, bottom, sidebar\n  priority: integer(\"priority\").default(0), // higher priority shows first\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User sessions table\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  sessionToken: varchar(\"session_token\", { length: 255 }).unique().notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n  kundaliRequests: many(kundaliRequests),\n  chatMessages: many(chatMessages),\n  likedProducts: many(likedProducts),\n  userCart: many(userCart),\n  userSessions: many(userSessions),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const productsRelations = relations(products, ({ many }) => ({\n  orderItems: many(orderItems),\n  likedProducts: many(likedProducts),\n  userCart: many(userCart),\n}));\n\nexport const kundaliRequestsRelations = relations(kundaliRequests, ({ one }) => ({\n  user: one(users, {\n    fields: [kundaliRequests.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  user: one(users, {\n    fields: [chatMessages.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const likedProductsRelations = relations(likedProducts, ({ one }) => ({\n  user: one(users, {\n    fields: [likedProducts.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [likedProducts.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const userCartRelations = relations(userCart, ({ one }) => ({\n  user: one(users, {\n    fields: [userCart.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [userCart.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const userSessionsRelations = relations(userSessions, ({ one }) => ({\n  user: one(users, {\n    fields: [userSessions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertKundaliRequestSchema = createInsertSchema(kundaliRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  birthDate: z.string().transform((val) => new Date(val)),\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLikedProductSchema = createInsertSchema(likedProducts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserCartSchema = createInsertSchema(userCart).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPromotionalBannerSchema = createInsertSchema(promotionalBanners).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Authentication schemas\nexport const registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  phone: z.string().optional(),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"New password must be at least 8 characters\"),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type KundaliRequest = typeof kundaliRequests.$inferSelect;\nexport type InsertKundaliRequest = z.infer<typeof insertKundaliRequestSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\n\nexport type LikedProduct = typeof likedProducts.$inferSelect;\nexport type InsertLikedProduct = z.infer<typeof insertLikedProductSchema>;\n\nexport type UserCart = typeof userCart.$inferSelect;\nexport type InsertUserCart = z.infer<typeof insertUserCartSchema>;\n\nexport type PromotionalBanner = typeof promotionalBanners.$inferSelect;\nexport type InsertPromotionalBanner = z.infer<typeof insertPromotionalBannerSchema>;\n\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\n\n// Auth types\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type ChangePasswordData = z.infer<typeof changePasswordSchema>;\n","size_bytes":12420},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport { AdminProvider } from \"@/hooks/useAdmin\";\nimport Home from \"@/pages/home\";\nimport { UserDashboard } from \"@/components/UserDashboard\";\nimport AdminPage from \"@/components/admin/AdminPage\";\nimport ProductDetail from \"@/components/ProductDetail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={UserDashboard} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/product/:id\" component={ProductDetail} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <AdminProvider>\n          <TooltipProvider>\n            <CartProvider>\n              <Toaster />\n              <Router />\n            </CartProvider>\n          </TooltipProvider>\n        </AdminProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1363},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 47%, 8%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 40%, 12%);\n  --card-foreground: hsl(210, 40%, 95%);\n  --popover: hsl(222, 40%, 12%);\n  --popover-foreground: hsl(210, 40%, 95%);\n  --primary: hsl(43, 96%, 56%);\n  --primary-foreground: hsl(222, 47%, 8%);\n  --secondary: hsl(262, 69%, 35%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(220, 21%, 21%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(222, 47%, 8%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(43, 96%, 56%);\n  --radius: 0.5rem;\n  --cosmic-navy: hsl(222, 47%, 8%);\n  --cosmic-purple: hsl(262, 69%, 35%);\n  --cosmic-gold: hsl(43, 96%, 56%);\n  --cosmic-silver: hsl(210, 16%, 93%);\n  --cosmic-grey: hsl(215, 16%, 24%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(222, 47%, 8%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 40%, 12%);\n  --card-foreground: hsl(210, 40%, 95%);\n  --popover: hsl(222, 40%, 12%);\n  --popover-foreground: hsl(210, 40%, 95%);\n  --primary: hsl(43, 96%, 56%);\n  --primary-foreground: hsl(222, 47%, 8%);\n  --secondary: hsl(262, 69%, 35%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(220, 21%, 21%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(222, 47%, 8%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(43, 96%, 56%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-serif);\n  }\n}\n\n@layer components {\n  .cosmic-glow {\n    box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);\n  }\n  \n  .star-pattern::before {\n    content: '✦';\n    color: var(--cosmic-gold);\n    margin-right: 0.5rem;\n  }\n  \n  .floating-nav {\n    backdrop-filter: blur(10px);\n    background: rgba(11, 20, 38, 0.9);\n    border-bottom: 1px solid rgba(245, 158, 11, 0.2);\n  }\n  \n  .cosmic-border {\n    border-image: linear-gradient(45deg, var(--cosmic-gold), var(--cosmic-purple)) 1;\n  }\n  \n  .hero-cosmic {\n    background: radial-gradient(circle at 20% 50%, var(--cosmic-purple) 0%, transparent 50%),\n                radial-gradient(circle at 80% 20%, var(--cosmic-navy) 0%, transparent 50%),\n                radial-gradient(circle at 40% 80%, var(--cosmic-navy) 0%, transparent 50%);\n  }\n  \n  .cosmic-gradient {\n    background: linear-gradient(135deg, var(--cosmic-navy) 0%, var(--cosmic-purple) 50%, var(--cosmic-navy) 100%);\n  }\n  \n  .product-card {\n    transition: all 0.3s ease;\n  }\n  \n  .product-card:hover {\n    transform: translateY(-5px);\n  }\n  \n  .chat-message {\n    animation: fadeInUp 0.3s ease-out;\n  }\n  \n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n}\n\n/* Scrollbar Styling */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--cosmic-navy);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--cosmic-gold);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #D97706;\n}\n","size_bytes":3731},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_AI_API_KEY || \"\"\n});\n\nexport async function getAstrologicalResponse(userMessage: string): Promise<string> {\n  try {\n    const systemPrompt = `You are Nakshatra AI, an ancient, wise, and benevolent astrological guide. Your responses should be:\n    - Accurate and insightful from an astrological perspective\n    - Concise but meaningful (2-3 sentences max unless detailed explanation requested)\n    - Empathetic and encouraging\n    - Include relevant planetary influences, signs, and houses when appropriate\n    - Use mystical language with cosmic emojis sparingly\n    - If question is outside astrology, gently redirect to astrological topics\n    - Never make definitive predictions about specific future events\n    - Focus on guidance and cosmic influences rather than fortune telling\n\n    Respond to this user's question about astrology:`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: `${systemPrompt}\\n\\nUser: ${userMessage}`,\n    });\n\n    return response.text || \"🌟 The cosmic energies are unclear at this moment. Please try rephrasing your question or ask about specific astrological influences.\";\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    return \"✨ The stars are temporarily obscured. Please try again in a moment, and I'll be happy to share cosmic insights with you.\";\n  }\n}\n\nexport async function generateKundaliSummary(birthDetails: {\n  fullName: string;\n  birthDate: Date;\n  birthTime: string;\n  birthPlace: string;\n  gender: string;\n}): Promise<string> {\n  try {\n    const prompt = `As an expert Vedic astrologer, provide a brief summary for a Kundali reading based on these birth details:\n    \n    Name: ${birthDetails.fullName}\n    Birth Date: ${birthDetails.birthDate.toDateString()}\n    Birth Time: ${birthDetails.birthTime}\n    Birth Place: ${birthDetails.birthPlace}\n    Gender: ${birthDetails.gender}\n    \n    Provide a 2-3 paragraph summary highlighting:\n    - Key personality traits based on likely sun sign\n    - General life themes and strengths\n    - Areas for growth and awareness\n    \n    Keep it encouraging and insightful, avoiding specific predictions.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt,\n    });\n\n    return response.text || \"Your cosmic blueprint reveals unique planetary influences that shape your spiritual journey.\";\n  } catch (error) {\n    console.error(\"Gemini API error for Kundali summary:\", error);\n    return \"The cosmic energies are aligning to reveal your celestial blueprint. A detailed analysis will be provided with your complete Kundali report.\";\n  }\n}\n","size_bytes":2805},"client/src/components/AstroAIChat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Send, Bot, User, Clock, Brain, Lock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ChatMessage {\n  id: string;\n  message: string;\n  isFromUser: boolean;\n  timestamp: Date;\n}\n\nexport default function AstroAIChat() {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: \"welcome\",\n      message: \"🌟 Namaste! I'm Nakshatra AI, your celestial guide. Ask me about your astrology, compatibility, or cosmic influences. How can I illuminate your path today?\",\n      isFromUser: false,\n      timestamp: new Date(),\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/chat\", { message });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        message: data.response,\n        isFromUser: false,\n        timestamp: new Date(),\n      }]);\n    },\n    onError: () => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        message: \"✨ The stars are temporarily obscured. Please try again in a moment, and I'll be happy to share cosmic insights with you.\",\n        isFromUser: false,\n        timestamp: new Date(),\n      }]);\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const message = inputMessage.trim();\n    \n    if (!message) return;\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      message,\n      isFromUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage(\"\");\n\n    // Get AI response\n    chatMutation.mutate(message);\n  };\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <section id=\"astroai\" className=\"py-20 px-6 bg-card/20\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Your Cosmic Confidante</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Connect with our AI-powered astrologer for instant insights and guidance. Ask about your signs, compatibility, or any astrological questions.\n          </p>\n        </div>\n\n        <Card className=\"cosmic-border overflow-hidden\">\n          {/* Chat Header */}\n          <CardHeader className=\"bg-gradient-to-r from-secondary/20 to-accent/20 border-b border-border\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center\">\n                <Bot className=\"text-accent-foreground text-xl\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-lg\">Nakshatra AI</CardTitle>\n                <p className=\"text-muted-foreground text-sm\">Your celestial guide • Online</p>\n              </div>\n            </div>\n          </CardHeader>\n\n          {/* Chat Messages */}\n          <div \n            ref={chatContainerRef}\n            className=\"h-96 overflow-y-auto p-6 space-y-4\"\n            data-testid=\"chat-container\"\n          >\n            {messages.map((message) => (\n              <div \n                key={message.id} \n                className={`flex items-start space-x-3 chat-message ${message.isFromUser ? 'flex-row-reverse space-x-reverse' : ''}`}\n              >\n                <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                  {message.isFromUser ? (\n                    <User className=\"text-accent-foreground text-sm\" />\n                  ) : (\n                    <Bot className=\"text-accent-foreground text-sm\" />\n                  )}\n                </div>\n                <div className={`rounded-2xl px-4 py-3 max-w-md ${\n                  message.isFromUser \n                    ? 'bg-accent/20' \n                    : 'bg-secondary/20'\n                }`}>\n                  <p className=\"text-sm\">{message.message}</p>\n                </div>\n              </div>\n            ))}\n\n            {/* Typing Indicator */}\n            {chatMutation.isPending && (\n              <div className=\"flex items-start space-x-3 chat-message\">\n                <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"text-accent-foreground text-sm\" />\n                </div>\n                <div className=\"bg-secondary/20 rounded-2xl px-4 py-3\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Chat Input */}\n          <CardContent className=\"p-6 border-t border-border\">\n            <form className=\"flex space-x-4\" onSubmit={handleSubmit}>\n              <Input\n                type=\"text\"\n                placeholder=\"Ask about your signs, planets, or cosmic guidance...\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                className=\"flex-1\"\n                disabled={chatMutation.isPending}\n                data-testid=\"input-chat-message\"\n              />\n              <Button \n                type=\"submit\" \n                disabled={chatMutation.isPending || !inputMessage.trim()}\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </form>\n            <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n              ✨ Powered by advanced AI with deep astrological knowledge\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Chat Features */}\n        <div className=\"grid md:grid-cols-3 gap-6 mt-12\">\n          <Card className=\"text-center\">\n            <CardContent className=\"p-6\">\n              <Clock className=\"text-2xl text-accent mb-3 mx-auto\" />\n              <h4 className=\"font-semibold mb-2\">24/7 Availability</h4>\n              <p className=\"text-muted-foreground text-sm\">Get cosmic guidance anytime, day or night</p>\n            </CardContent>\n          </Card>\n          <Card className=\"text-center\">\n            <CardContent className=\"p-6\">\n              <Brain className=\"text-2xl text-secondary mb-3 mx-auto\" />\n              <h4 className=\"font-semibold mb-2\">Ancient Wisdom</h4>\n              <p className=\"text-muted-foreground text-sm\">AI trained on thousands of years of astrological knowledge</p>\n            </CardContent>\n          </Card>\n          <Card className=\"text-center\">\n            <CardContent className=\"p-6\">\n              <Lock className=\"text-2xl text-accent mb-3 mx-auto\" />\n              <h4 className=\"font-semibold mb-2\">Private & Secure</h4>\n              <p className=\"text-muted-foreground text-sm\">Your cosmic conversations remain confidential</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7901},"client/src/components/CelestialStore.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Product } from \"@shared/schema\";\n\nconst categories = [\n  { id: \"all\", name: \"All Products\" },\n  { id: \"rings\", name: \"Rings\" },\n  { id: \"stones\", name: \"Gemstones\" },\n  { id: \"yantras\", name: \"Yantras\" },\n  { id: \"books\", name: \"Books\" },\n  { id: \"accessories\", name: \"Accessories\" },\n];\n\nexport default function CelestialStore() {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const { addToCart } = useCart();\n  const { toast } = useToast();\n\n  const { data: products = [], isLoading, error } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", selectedCategory === \"all\" ? \"\" : `?category=${selectedCategory}`],\n  });\n\n  const handleAddToCart = (product: Product) => {\n    addToCart({\n      id: product.id,\n      name: product.name,\n      price: parseFloat(product.price),\n      imageUrl: product.imageUrl || \"\",\n      quantity: 1,\n    });\n\n    toast({\n      title: \"Added to Cart! ✨\",\n      description: `${product.name} has been added to your cosmic collection.`,\n    });\n  };\n\n  if (error) {\n    return (\n      <section id=\"store\" className=\"py-20 px-6\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Discover Celestial Treasures</h2>\n          <p className=\"text-red-500\">Unable to load products. Please try again later.</p>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"store\" className=\"py-20 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Discover Celestial Treasures</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Sacred artifacts and spiritual tools blessed by ancient wisdom and cosmic energies.\n          </p>\n        </div>\n\n        {/* Product Categories */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n              onClick={() => setSelectedCategory(category.id)}\n              className=\"rounded-full transition-all hover:scale-105\"\n              data-testid={`category-${category.id}`}\n            >\n              {category.name}\n            </Button>\n          ))}\n        </div>\n\n        {/* Product Grid */}\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"w-full h-48 bg-muted rounded-t-lg\"></div>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded mb-4 w-3/4\"></div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    <div className=\"h-8 bg-muted rounded w-24\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : products.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground text-lg\">No products found in this category.</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Our cosmic inventory is being updated. Please check back soon.\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n            {products.map((product: Product) => (\n              <Card key={product.id} className=\"product-card border border-border overflow-hidden hover:border-cosmic-gold/50 transition-all group\">\n                <Link href={`/product/${product.id}`}>\n                  <img \n                    src={product.imageUrl || \"https://images.unsplash.com/photo-1602173574767-37ac01994b2a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"} \n                    alt={product.name} \n                    className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300 cursor-pointer\"\n                  />\n                </Link>\n                <CardContent className=\"p-6\">\n                  <Link href={`/product/${product.id}`}>\n                    <h3 className=\"font-semibold text-lg mb-2 hover:text-cosmic-gold transition-colors cursor-pointer\">{product.name}</h3>\n                  </Link>\n                  <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\">{product.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-2xl font-bold text-accent\">₹{product.price}</span>\n                    <Button \n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        handleAddToCart(product);\n                      }}\n                      className=\"font-medium transition-all cosmic-glow\"\n                      data-testid={`button-add-to-cart-${product.id}`}\n                    >\n                      Add to Cart\n                    </Button>\n                  </div>\n                  {product.stock !== undefined && product.stock !== null && product.stock < 5 && (\n                    <p className=\"text-orange-500 text-xs mt-2\">Only {product.stock} left in stock!</p>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Load Products Button for Demo */}\n        {!isLoading && products.length === 0 && (\n          <div className=\"text-center\">\n            <Button \n              onClick={() => {\n                fetch(\"/api/seed-products\", { method: \"POST\" })\n                  .then(() => {\n                    toast({\n                      title: \"Products Loaded! 🌟\",\n                      description: \"Sample celestial treasures have been added to the store.\",\n                    });\n                    window.location.reload();\n                  })\n                  .catch(() => {\n                    toast({\n                      title: \"Failed to Load Products\",\n                      description: \"Please try again later.\",\n                      variant: \"destructive\",\n                    });\n                  });\n              }}\n              className=\"cosmic-glow\"\n              data-testid=\"button-seed-products\"\n            >\n              Load Sample Products\n            </Button>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":7070},"client/src/components/ContactSection.tsx":{"content":"import { useState } from \"react\";\nimport { Mail, Phone, MapPin, Clock, Facebook, Instagram, Youtube, Twitter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ContactFormData {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n}\n\nexport default function ContactSection() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<ContactFormData>({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      return await apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent to the Stars! ✨\",\n        description: \"We will respond within 24 hours with cosmic insights.\",\n      });\n      // Reset form\n      setFormData({\n        name: \"\",\n        email: \"\",\n        subject: \"\",\n        message: \"\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Message Failed\",\n        description: \"Failed to send your message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.subject || !formData.message) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    contactMutation.mutate(formData);\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 px-6 bg-card/20\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Connect with the Cosmos</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Ready to begin your celestial journey? Reach out to us for personalized guidance or any questions about our services.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <Card className=\"cosmic-border\">\n            <CardHeader>\n              <CardTitle className=\"star-pattern\">Send a Message</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"contact-name\">Name *</Label>\n                    <Input\n                      id=\"contact-name\"\n                      type=\"text\"\n                      placeholder=\"Your full name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      required\n                      data-testid=\"input-contact-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"contact-email\">Email *</Label>\n                    <Input\n                      id=\"contact-email\"\n                      type=\"email\"\n                      placeholder=\"your@email.com\"\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                      required\n                      data-testid=\"input-contact-email\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"contact-subject\">Subject *</Label>\n                  <Select value={formData.subject} onValueChange={(value) => setFormData(prev => ({ ...prev, subject: value }))}>\n                    <SelectTrigger data-testid=\"select-contact-subject\">\n                      <SelectValue placeholder=\"Select a subject\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"kundali\">Kundali Consultation</SelectItem>\n                      <SelectItem value=\"products\">Product Inquiry</SelectItem>\n                      <SelectItem value=\"astroai\">AstroAI Support</SelectItem>\n                      <SelectItem value=\"general\">General Question</SelectItem>\n                      <SelectItem value=\"partnership\">Partnership</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"contact-message\">Message *</Label>\n                  <Textarea\n                    id=\"contact-message\"\n                    rows={5}\n                    placeholder=\"Share your cosmic questions or thoughts...\"\n                    value={formData.message}\n                    onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}\n                    required\n                    data-testid=\"textarea-contact-message\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full cosmic-glow\"\n                  disabled={contactMutation.isPending}\n                  data-testid=\"button-send-contact\"\n                >\n                  {contactMutation.isPending ? \"Sending to the Stars...\" : \"Send Message to the Stars\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"star-pattern\">Get in Touch</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-accent/20 rounded-full flex items-center justify-center\">\n                    <Mail className=\"text-accent\" />\n                  </div>\n                  <div>\n                    <div className=\"font-medium\">Email Us</div>\n                    <div className=\"text-muted-foreground\">contact@nakshatra.com</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-secondary/20 rounded-full flex items-center justify-center\">\n                    <Phone className=\"text-secondary\" />\n                  </div>\n                  <div>\n                    <div className=\"font-medium\">Call Us</div>\n                    <div className=\"text-muted-foreground\">+91 98765 43210</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-accent/20 rounded-full flex items-center justify-center\">\n                    <MapPin className=\"text-accent\" />\n                  </div>\n                  <div>\n                    <div className=\"font-medium\">Visit Us</div>\n                    <div className=\"text-muted-foreground\">\n                      Sacred Wisdom Center<br />\n                      Varanasi, Uttar Pradesh, India\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-secondary/20 rounded-full flex items-center justify-center\">\n                    <Clock className=\"text-secondary\" />\n                  </div>\n                  <div>\n                    <div className=\"font-medium\">Consultation Hours</div>\n                    <div className=\"text-muted-foreground\">\n                      Mon-Sat: 9:00 AM - 8:00 PM IST<br />\n                      Sun: 10:00 AM - 6:00 PM IST\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Social Media & FAQ */}\n            <Card>\n              <CardContent className=\"p-8\">\n                <h4 className=\"text-xl font-serif font-semibold mb-4\">Follow Our Cosmic Journey</h4>\n                <div className=\"flex space-x-4 mb-6\">\n                  <a \n                    href=\"#\" \n                    className=\"w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center hover:bg-accent hover:text-accent-foreground transition-all\"\n                    data-testid=\"link-facebook\"\n                  >\n                    <Facebook className=\"w-4 h-4\" />\n                  </a>\n                  <a \n                    href=\"#\" \n                    className=\"w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center hover:bg-accent hover:text-accent-foreground transition-all\"\n                    data-testid=\"link-instagram\"\n                  >\n                    <Instagram className=\"w-4 h-4\" />\n                  </a>\n                  <a \n                    href=\"#\" \n                    className=\"w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center hover:bg-accent hover:text-accent-foreground transition-all\"\n                    data-testid=\"link-youtube\"\n                  >\n                    <Youtube className=\"w-4 h-4\" />\n                  </a>\n                  <a \n                    href=\"#\" \n                    className=\"w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center hover:bg-accent hover:text-accent-foreground transition-all\"\n                    data-testid=\"link-twitter\"\n                  >\n                    <Twitter className=\"w-4 h-4\" />\n                  </a>\n                </div>\n                <p className=\"text-muted-foreground text-sm\">\n                  📅 Response time: Within 24 hours<br />\n                  🌟 For urgent consultations, please call directly<br />\n                  ✨ Join our newsletter for cosmic updates\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10417},"client/src/components/Footer.tsx":{"content":"import { Star, Facebook, Instagram, Youtube, Twitter } from \"lucide-react\";\n\nexport default function Footer() {\n  const scrollToSection = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      const offsetTop = element.offsetTop - 80;\n      window.scrollTo({\n        top: offsetTop,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  return (\n    <footer className=\"bg-cosmic-navy border-t border-border py-12 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-8\">\n          {/* Brand */}\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Star className=\"text-accent text-2xl\" />\n              <span className=\"text-2xl font-serif font-bold text-accent\">Nakshatra</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              Your trusted guide to cosmic wisdom, offering personalized astrological insights and sacred tools for spiritual growth.\n            </p>\n            <div className=\"flex space-x-3\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-accent transition-colors\" data-testid=\"footer-facebook\">\n                <Facebook className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-accent transition-colors\" data-testid=\"footer-instagram\">\n                <Instagram className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-accent transition-colors\" data-testid=\"footer-youtube\">\n                <Youtube className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-accent transition-colors\" data-testid=\"footer-twitter\">\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Services */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Services</h4>\n            <ul className=\"space-y-2 text-muted-foreground text-sm\">\n              <li>\n                <button \n                  onClick={() => scrollToSection('kundali')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-birth-chart\"\n                >\n                  Birth Chart Analysis\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('kundali')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-predictions\"\n                >\n                  Life Predictions\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('kundali')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-compatibility\"\n                >\n                  Marriage Compatibility\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('astroai')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-ai-consultations\"\n                >\n                  AI Consultations\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('contact')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-personal-sessions\"\n                >\n                  Personal Sessions\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          {/* Products */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Sacred Collection</h4>\n            <ul className=\"space-y-2 text-muted-foreground text-sm\">\n              <li>\n                <button \n                  onClick={() => scrollToSection('store')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-gemstone-rings\"\n                >\n                  Gemstone Rings\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('store')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-healing-crystals\"\n                >\n                  Healing Crystals\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('store')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-sacred-yantras\"\n                >\n                  Sacred Yantras\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('store')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-astrology-books\"\n                >\n                  Astrology Books\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('store')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-spiritual-accessories\"\n                >\n                  Spiritual Accessories\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          {/* Support */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Support</h4>\n            <ul className=\"space-y-2 text-muted-foreground text-sm\">\n              <li>\n                <button \n                  onClick={() => scrollToSection('contact')}\n                  className=\"hover:text-accent transition-colors text-left\"\n                  data-testid=\"footer-contact-us\"\n                >\n                  Contact Us\n                </button>\n              </li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-faq\">FAQ</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-shipping\">Shipping Info</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-returns\">Returns</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-privacy\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"footer-terms\">Terms of Service</a></li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-border pt-8 flex flex-col md:flex-row items-center justify-between\">\n          <div className=\"text-muted-foreground text-sm\">\n            © 2024 Nakshatra. All rights reserved. Made with cosmic love ✨\n          </div>\n          <div className=\"flex items-center space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-accent text-sm transition-colors\" data-testid=\"footer-privacy-link\">Privacy</a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-accent text-sm transition-colors\" data-testid=\"footer-terms-link\">Terms</a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-accent text-sm transition-colors\" data-testid=\"footer-cookies\">Cookies</a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":7749},"client/src/components/HeroSection.tsx":{"content":"import { ChartPie, Gem, Bot } from \"lucide-react\";\n\nexport default function HeroSection() {\n  const scrollToSection = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      const offsetTop = element.offsetTop - 80;\n      window.scrollTo({\n        top: offsetTop,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"relative min-h-screen flex items-center justify-center text-center px-6 pt-20\">\n      {/* Cosmic background */}\n      <div className=\"absolute inset-0 hero-cosmic\"></div>\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat opacity-40\" \n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1200')\"\n        }}\n      ></div>\n      \n      <div className=\"relative z-10 max-w-5xl mx-auto\">\n        <h1 className=\"text-5xl md:text-7xl font-serif font-bold mb-6 bg-gradient-to-r from-accent to-secondary bg-clip-text text-transparent\">\n          Nakshatra\n        </h1>\n        <p className=\"text-xl md:text-2xl text-muted-foreground mb-4 font-light\">Your Celestial Blueprint</p>\n        <p className=\"text-lg md:text-xl max-w-3xl mx-auto mb-12 leading-relaxed\">\n          Unlock the mysteries of your cosmic destiny through personalized astrology, curated celestial treasures, and AI-powered guidance from the stars.\n        </p>\n        \n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-16\">\n          <button \n            onClick={() => scrollToSection('kundali')}\n            className=\"bg-accent hover:bg-accent/90 text-accent-foreground px-8 py-4 rounded-lg font-semibold text-lg transition-all hover:scale-105 cosmic-glow\"\n            data-testid=\"button-order-kundali\"\n          >\n            Order Your Kundali\n          </button>\n          <button \n            onClick={() => scrollToSection('store')}\n            className=\"bg-secondary hover:bg-secondary/90 text-secondary-foreground px-8 py-4 rounded-lg font-semibold text-lg transition-all hover:scale-105\"\n            data-testid=\"button-shop-treasures\"\n          >\n            Shop Celestial Treasures\n          </button>\n          <button \n            onClick={() => scrollToSection('astroai')}\n            className=\"border border-accent text-accent hover:bg-accent hover:text-accent-foreground px-8 py-4 rounded-lg font-semibold text-lg transition-all\"\n            data-testid=\"button-chat-astroai\"\n          >\n            Chat with AstroAI\n          </button>\n        </div>\n\n        {/* Featured Services Preview */}\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n          <div className=\"bg-card/50 backdrop-blur-sm rounded-xl p-6 border border-border hover:border-accent/50 transition-all\">\n            <ChartPie className=\"text-3xl text-accent mb-4 mx-auto\" />\n            <h3 className=\"text-xl font-serif font-semibold mb-2\">Personalized Kundali</h3>\n            <p className=\"text-muted-foreground\">Detailed birth chart analysis revealing your cosmic blueprint and life path.</p>\n          </div>\n          <div className=\"bg-card/50 backdrop-blur-sm rounded-xl p-6 border border-border hover:border-accent/50 transition-all\">\n            <Gem className=\"text-3xl text-secondary mb-4 mx-auto\" />\n            <h3 className=\"text-xl font-serif font-semibold mb-2\">Sacred Artifacts</h3>\n            <p className=\"text-muted-foreground\">Authentic gemstones, yantras, and mystical tools for spiritual enhancement.</p>\n          </div>\n          <div className=\"bg-card/50 backdrop-blur-sm rounded-xl p-6 border border-border hover:border-accent/50 transition-all\">\n            <Bot className=\"text-3xl text-accent mb-4 mx-auto\" />\n            <h3 className=\"text-xl font-serif font-semibold mb-2\">AI Cosmic Guide</h3>\n            <p className=\"text-muted-foreground\">24/7 astrological insights powered by advanced AI and ancient wisdom.</p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4060},"client/src/components/JourneySection.tsx":{"content":"import { Star, Book, Laptop, Rocket } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport portrait from \"../image/portrait.png\";\n\nconst timelineEvents = [\n  {\n    year: \"1985 - 1995\",\n    title: \"Early Awakening\",\n    description: \"Born under a rare planetary alignment, I felt the cosmic call from childhood. My grandmother, a village astrologer, first introduced me to the language of the stars.\",\n    icon: Star,\n    side: \"left\",\n  },\n  {\n    year: \"1995 - 2005\",\n    title: \"Sacred Learning\",\n    description: \"Studied at the ancient Kashi Vishwanath temple complex, learning from masters who preserved centuries-old astrological traditions and Sanskrit texts.\",\n    icon: Book,\n    side: \"right\",\n  },\n  {\n    year: \"2005 - 2020\",\n    title: \"Modern Integration\",\n    description: \"Embraced technology to reach global seekers, developing innovative methods to blend traditional wisdom with contemporary accessibility.\",\n    icon: Laptop,\n    side: \"left\",\n  },\n  {\n    year: \"2020 - Present\",\n    title: \"Nakshatra Vision\",\n    description: \"Founded Nakshatra to create a comprehensive platform where ancient wisdom meets cutting-edge AI, making cosmic guidance accessible to all.\",\n    icon: Rocket,\n    side: \"right\",\n  },\n];\n\nexport default function JourneySection() {\n  return (\n    <section id=\"journey\" className=\"py-20 px-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">The Stars Aligned: My Story</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            A journey guided by celestial wisdom and a passion for unlocking cosmic mysteries.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center mb-16\">\n          <div>\n            <img \n              src={portrait}\n              alt=\"Master Astrologer Portrait\" \n              className=\"rounded-2xl shadow-2xl w-full object-cover aspect-square\"\n            />\n          </div>\n          <div className=\"space-y-6\">\n            <h3 className=\"text-3xl font-serif font-semibold star-pattern\">\n              Dr. Mukund Murarai Pandey\n            </h3>\n\n            <p className=\"text-muted-foreground text-lg leading-relaxed\">\n              With over 45 years of dedicated practice in Vedic astrology, I have guided\n              more than 35,000 individuals on their life journeys. Rooted in the timeless\n              wisdom of the ancient scriptures, my mission has always been to illuminate\n              the path of seekers with clarity, compassion, and truth.\n            </p>\n\n            <p className=\"text-muted-foreground leading-relaxed\">\n              Over the decades, I have witnessed how the stars and planets shape human\n              destiny, offering answers where logic alone cannot. Each consultation is not\n              just a prediction but a profound dialogue between the soul and the cosmos —\n              revealing opportunities, overcoming challenges, and aligning with one’s\n              higher purpose.\n            </p>\n\n            <div className=\"flex flex-wrap gap-4 mt-8\">\n              <div className=\"bg-accent/20 px-4 py-2 rounded-full\">\n                <span className=\"text-accent font-medium\">45+ Years Experience</span>\n              </div>\n              <div className=\"bg-secondary/20 px-4 py-2 rounded-full\">\n                <span className=\"text-secondary font-medium\">35,000+ Consultations</span>\n              </div>\n              <div className=\"bg-accent/20 px-4 py-2 rounded-full\">\n                <span className=\"text-accent font-medium\">Renowned Astrologer</span>\n              </div>\n            </div>\n          </div>\n\n        </div>\n\n        {/* Timeline */}\n        <div className=\"relative\">\n          <div className=\"absolute left-1/2 transform -translate-x-px h-full w-0.5 bg-gradient-to-b from-accent to-secondary\"></div>\n          \n          <div className=\"space-y-12\">\n            {timelineEvents.map((event, index) => {\n              const IconComponent = event.icon;\n              return (\n                <div key={index} className=\"flex items-center\">\n                  {event.side === \"left\" ? (\n                    <>\n                      <div className=\"flex-1 pr-8 text-right\">\n                        <Card>\n                          <CardContent className=\"p-6\">\n                            <h4 className=\"text-xl font-serif font-semibold mb-2\">{event.title}</h4>\n                            <p className=\"text-muted-foreground\">{event.description}</p>\n                            <div className=\"text-accent font-medium mt-2\">{event.year}</div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                      <div className=\"w-8 h-8 bg-accent rounded-full border-4 border-background flex items-center justify-center\">\n                        <IconComponent className=\"text-accent-foreground w-4 h-4\" />\n                      </div>\n                      <div className=\"flex-1 pl-8\"></div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"flex-1 pr-8\"></div>\n                      <div className=\"w-8 h-8 bg-secondary rounded-full border-4 border-background flex items-center justify-center\">\n                        <IconComponent className=\"text-secondary-foreground w-4 h-4\" />\n                      </div>\n                      <div className=\"flex-1 pl-8\">\n                        <Card>\n                          <CardContent className=\"p-6\">\n                            <h4 className=\"text-xl font-serif font-semibold mb-2\">{event.title}</h4>\n                            <p className=\"text-muted-foreground\">{event.description}</p>\n                            <div className=\"text-secondary font-medium mt-2\">{event.year}</div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Philosophy Section */}\n        <div className=\"mt-20 text-center\">\n          <Card className=\"bg-gradient-to-r from-secondary/20 to-accent/20\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-serif font-semibold mb-6 star-pattern\">My Philosophy</h3>\n              <blockquote className=\"text-xl font-serif italic text-muted-foreground mb-6\">\n                \"Every soul carries a cosmic blueprint written in the stars at the moment of birth. My role is not to predict fate, but to illuminate the path towards your highest potential.\"\n              </blockquote>\n              <p className=\"text-muted-foreground leading-relaxed max-w-4xl mx-auto\">\n                I believe astrology is not about limiting beliefs or fearful predictions, but about understanding the cosmic energies that influence our lives and using that knowledge to make empowered choices. Each reading is an opportunity to connect with your authentic self and align with your soul's purpose.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7281},"client/src/components/KundaliSection.tsx":{"content":"import { useState } from \"react\";\nimport { Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface KundaliFormData {\n  fullName: string;\n  gender: string;\n  birthDate: string;\n  birthTime: string;\n  birthPlace: string;\n  fatherName: string;\n  kundaliType: string;\n}\n\nconst kundaliTypes = [\n  { value: \"basic\", name: \"Basic Kundali Report\", description: \"Traditional birth chart analysis\", price: 999 },\n  { value: \"detailed\", name: \"Detailed Life Reading\", description: \"Comprehensive analysis with predictions\", price: 2499 },\n  { value: \"compatibility\", name: \"Marriage Compatibility\", description: \"Partner matching and compatibility analysis\", price: 1799 },\n  { value: \"career\", name: \"Career & Finance Forecast\", description: \"Professional and financial guidance\", price: 1999 },\n  { value: \"yearly\", name: \"Yearly Prediction\", description: \"Complete year ahead forecast\", price: 1299 },\n];\n\nexport default function KundaliSection() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<KundaliFormData>({\n    fullName: \"\",\n    gender: \"\",\n    birthDate: \"\",\n    birthTime: \"\",\n    birthPlace: \"\",\n    fatherName: \"\",\n    kundaliType: \"\",\n  });\n\n  const selectedType = kundaliTypes.find(type => type.value === formData.kundaliType);\n\n  const createKundaliMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/kundali\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Kundali Order Placed! 🌟\",\n        description: \"Your cosmic blueprint request has been received. You'll receive confirmation via email.\",\n      });\n      // Reset form\n      setFormData({\n        fullName: \"\",\n        gender: \"\",\n        birthDate: \"\",\n        birthTime: \"\",\n        birthPlace: \"\",\n        fatherName: \"\",\n        kundaliType: \"\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Order Failed\",\n        description: \"Failed to place your Kundali order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.fullName || !formData.gender || !formData.birthDate || !formData.birthTime || !formData.birthPlace || !formData.kundaliType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const requestData = {\n      ...formData,\n      birthDate: new Date(formData.birthDate).toISOString(),\n      price: selectedType?.price.toString() || \"0\",\n    };\n\n    createKundaliMutation.mutate(requestData);\n  };\n\n  const handleGetQuote = () => {\n    if (!selectedType) {\n      toast({\n        title: \"Select Kundali Type\",\n        description: \"Please select a Kundali type to get your quote.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: `📊 Quote Summary`,\n      description: `${selectedType.name} - ₹${selectedType.price}\\n\\n✨ Includes detailed analysis and PDF report delivery within 3-5 business days.`,\n    });\n  };\n\n  return (\n    <section id=\"kundali\" className=\"py-20 px-6 bg-card/20\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-serif font-bold mb-6\">Unlock Your Celestial Blueprint</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Discover the cosmic influences that shape your destiny through detailed Vedic astrology analysis.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 items-start\">\n          {/* Kundali Form */}\n          <Card className=\"cosmic-border\">\n            <CardHeader>\n              <CardTitle className=\"star-pattern\">Birth Details Form</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"fullName\">Full Name *</Label>\n                    <Input\n                      id=\"fullName\"\n                      type=\"text\"\n                      placeholder=\"Enter your full name\"\n                      value={formData.fullName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n                      required\n                      data-testid=\"input-fullname\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"gender\">Gender *</Label>\n                    <Select value={formData.gender} onValueChange={(value) => setFormData(prev => ({ ...prev, gender: value }))}>\n                      <SelectTrigger data-testid=\"select-gender\">\n                        <SelectValue placeholder=\"Select Gender\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                        <SelectItem value=\"other\">Other/Prefer Not To Say</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"birthDate\">Birth Date *</Label>\n                    <Input\n                      id=\"birthDate\"\n                      type=\"date\"\n                      value={formData.birthDate}\n                      onChange={(e) => setFormData(prev => ({ ...prev, birthDate: e.target.value }))}\n                      required\n                      data-testid=\"input-birthdate\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"birthTime\">Birth Time *</Label>\n                    <Input\n                      id=\"birthTime\"\n                      type=\"time\"\n                      value={formData.birthTime}\n                      onChange={(e) => setFormData(prev => ({ ...prev, birthTime: e.target.value }))}\n                      required\n                      data-testid=\"input-birthtime\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"birthPlace\">Birth Place *</Label>\n                  <Input\n                    id=\"birthPlace\"\n                    type=\"text\"\n                    placeholder=\"City, State, Country\"\n                    value={formData.birthPlace}\n                    onChange={(e) => setFormData(prev => ({ ...prev, birthPlace: e.target.value }))}\n                    required\n                    data-testid=\"input-birthplace\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fatherName\">Father's Name (Optional)</Label>\n                  <Input\n                    id=\"fatherName\"\n                    type=\"text\"\n                    placeholder=\"Enter father's name\"\n                    value={formData.fatherName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, fatherName: e.target.value }))}\n                    data-testid=\"input-fathername\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium mb-4 block\">Select Kundali Type *</Label>\n                  <div className=\"space-y-3\">\n                    {kundaliTypes.map((type) => (\n                      <div \n                        key={type.value} \n                        className=\"flex items-center p-4 border border-border rounded-lg hover:border-accent transition-colors cursor-pointer\"\n                        onClick={() => setFormData(prev => ({ ...prev, kundaliType: type.value }))}\n                      >\n                        <input\n                          type=\"radio\"\n                          name=\"kundaliType\"\n                          value={type.value}\n                          checked={formData.kundaliType === type.value}\n                          onChange={(e) => setFormData(prev => ({ ...prev, kundaliType: e.target.value }))}\n                          className=\"mr-3 accent-accent\"\n                          data-testid={`radio-kundali-${type.value}`}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{type.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{type.description}</div>\n                        </div>\n                        <div className=\"text-accent font-semibold\">₹{type.price}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"pt-4 space-y-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"secondary\" \n                    className=\"w-full\"\n                    onClick={handleGetQuote}\n                    data-testid=\"button-get-quote\"\n                  >\n                    Get Quote & Preview\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full cosmic-glow\"\n                    disabled={createKundaliMutation.isPending}\n                    data-testid=\"button-checkout\"\n                  >\n                    {createKundaliMutation.isPending ? \"Processing...\" : \"Proceed to Secure Checkout\"}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Information Panel */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-serif font-semibold mb-4 star-pattern\">What is a Kundali?</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  A Kundali, also known as a birth chart or horoscope, is a cosmic map of the planetary positions at the exact time and place of your birth. It reveals your unique cosmic blueprint and provides insights into:\n                </p>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li className=\"flex items-center\">\n                    <Star className=\"text-accent mr-2 w-4 h-4\" /> \n                    Personality traits and characteristics\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Star className=\"text-accent mr-2 w-4 h-4\" /> \n                    Career and financial prospects\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Star className=\"text-accent mr-2 w-4 h-4\" /> \n                    Relationship compatibility\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Star className=\"text-accent mr-2 w-4 h-4\" /> \n                    Health and wellness guidance\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Star className=\"text-accent mr-2 w-4 h-4\" /> \n                    Favorable and challenging periods\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Testimonial */}\n            <Card className=\"bg-gradient-to-r from-secondary/20 to-accent/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=50&h=50\" \n                    alt=\"Customer testimonial\" \n                    className=\"w-12 h-12 rounded-full mr-4 object-cover\"\n                  />\n                  <div>\n                    <div className=\"font-medium\">Priya Sharma</div>\n                    <div className=\"text-sm text-muted-foreground\">Mumbai, India</div>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground italic\">\n                  \"The detailed life reading from Nakshatra was incredibly accurate and insightful. It helped me understand my strengths and navigate challenging times with confidence.\"\n                </p>\n                <div className=\"flex mt-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"text-accent w-4 h-4 fill-current\" />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":13152},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Star, ShoppingCart, User, Menu, X, LogIn, UserCircle, Settings } from \"lucide-react\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { AuthModal } from \"@/components/auth/AuthModal\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function Navigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { cartItems, setIsCartOpen } = useCart();\n  const { user, isAuthenticated, logout, isLoading } = useAuth();\n\n  const cartItemCount = cartItems.reduce((total, item) => total + item.quantity, 0);\n\n  const handleLogout = async () => {\n    await logout();\n    setIsMobileMenuOpen(false);\n  };\n\n  const scrollToSection = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      const offsetTop = element.offsetTop - 80;\n      window.scrollTo({\n        top: offsetTop,\n        behavior: 'smooth'\n      });\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <nav className=\"floating-nav fixed top-0 left-0 right-0 z-50 px-6 py-4\">\n      <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Star className=\"text-accent text-2xl\" />\n          <span className=\"text-2xl font-serif font-bold text-accent\">Nakshatra</span>\n          <span className=\"text-sm text-muted-foreground hidden sm:block\">Your Celestial Blueprint</span>\n        </div>\n        \n        <div className=\"hidden lg:flex items-center space-x-8\">\n          <button \n            onClick={() => scrollToSection('home')}\n            className=\"text-foreground hover:text-accent transition-colors\"\n            data-testid=\"nav-home\"\n          >\n            Home\n          </button>\n          <button \n            onClick={() => scrollToSection('kundali')}\n            className=\"text-foreground hover:text-accent transition-colors\"\n            data-testid=\"nav-kundali\"\n          >\n            Order Kundali\n          </button>\n          <button \n            onClick={() => scrollToSection('store')}\n            className=\"text-foreground hover:text-accent transition-colors\"\n            data-testid=\"nav-store\"\n          >\n            Celestial Store\n          </button>\n          <button \n            onClick={() => scrollToSection('astroai')}\n            className=\"text-foreground hover:text-accent transition-colors\"\n            data-testid=\"nav-astroai\"\n          >\n            AstroAI Chat\n          </button>\n          <button \n            onClick={() => scrollToSection('journey')}\n            className=\"text-foreground hover:text-accent transition-colors\"\n            data-testid=\"nav-journey\"\n          >\n            My Journey\n          </button>\n          <button \n            onClick={() => scrollToSection('contact')}\n            className=\"text-foreground hover:text-accent transition-colors\"\n            data-testid=\"nav-contact\"\n          >\n            Contact\n          </button>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <button \n            className=\"relative\"\n            onClick={() => setIsCartOpen(true)}\n            data-testid=\"button-cart\"\n          >\n            <ShoppingCart className=\"text-xl text-foreground hover:text-accent transition-colors\" />\n            {cartItemCount > 0 && (\n              <span className=\"absolute -top-2 -right-2 bg-accent text-accent-foreground rounded-full w-5 h-5 text-xs flex items-center justify-center\">\n                {cartItemCount}\n              </span>\n            )}\n          </button>\n          {/* User Authentication */}\n          {isLoading ? (\n            <div className=\"w-8 h-8 animate-pulse bg-accent/20 rounded-full\" />\n          ) : isAuthenticated ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"relative h-8 w-8 rounded-full p-0\"\n                  data-testid=\"button-user-menu\"\n                >\n                  <UserCircle className=\"h-6 w-6 text-foreground hover:text-accent\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56 cosmic-bg border-cosmic-purple/30\" align=\"end\">\n                <div className=\"px-2 py-1.5\">\n                  <p className=\"text-sm font-medium text-white\">\n                    {user?.firstName} {user?.lastName}\n                  </p>\n                  <p className=\"text-xs text-cosmic-gold/70\">\n                    {user?.email}\n                  </p>\n                </div>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/dashboard\" className=\"cursor-pointer\">\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    Dashboard\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer text-red-400 hover:text-red-300\">\n                  <LogIn className=\"mr-2 h-4 w-4 rotate-180\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <AuthModal>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-accent text-accent hover:bg-accent hover:text-accent-foreground\"\n                data-testid=\"button-login\"\n              >\n                <LogIn className=\"mr-2 h-4 w-4\" />\n                Login\n              </Button>\n            </AuthModal>\n          )}\n          <button \n            className=\"lg:hidden text-foreground\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {isMobileMenuOpen ? <X className=\"text-xl\" /> : <Menu className=\"text-xl\" />}\n          </button>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      {isMobileMenuOpen && (\n        <div className=\"lg:hidden absolute top-full left-0 right-0 bg-card border border-border rounded-b-lg mt-2 mx-6 p-6 space-y-4\">\n          <button \n            onClick={() => scrollToSection('home')}\n            className=\"block text-foreground hover:text-accent transition-colors\"\n            data-testid=\"mobile-nav-home\"\n          >\n            Home\n          </button>\n          <button \n            onClick={() => scrollToSection('kundali')}\n            className=\"block text-foreground hover:text-accent transition-colors\"\n            data-testid=\"mobile-nav-kundali\"\n          >\n            Order Kundali\n          </button>\n          <button \n            onClick={() => scrollToSection('store')}\n            className=\"block text-foreground hover:text-accent transition-colors\"\n            data-testid=\"mobile-nav-store\"\n          >\n            Celestial Store\n          </button>\n          <button \n            onClick={() => scrollToSection('astroai')}\n            className=\"block text-foreground hover:text-accent transition-colors\"\n            data-testid=\"mobile-nav-astroai\"\n          >\n            AstroAI Chat\n          </button>\n          <button \n            onClick={() => scrollToSection('journey')}\n            className=\"block text-foreground hover:text-accent transition-colors\"\n            data-testid=\"mobile-nav-journey\"\n          >\n            My Journey\n          </button>\n          <button \n            onClick={() => scrollToSection('contact')}\n            className=\"block text-foreground hover:text-accent transition-colors\"\n            data-testid=\"mobile-nav-contact\"\n          >\n            Contact\n          </button>\n          \n          {/* Mobile User Authentication */}\n          <div className=\"border-t border-border pt-4\">\n            {isAuthenticated ? (\n              <div className=\"space-y-2\">\n                <div className=\"px-2 py-1\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {user?.firstName} {user?.lastName}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {user?.email}\n                  </p>\n                </div>\n                <Link href=\"/dashboard\">\n                  <button \n                    onClick={() => setIsMobileMenuOpen(false)}\n                    className=\"w-full text-left block text-foreground hover:text-accent transition-colors\"\n                  >\n                    Dashboard\n                  </button>\n                </Link>\n                <button \n                  onClick={handleLogout}\n                  className=\"w-full text-left block text-red-400 hover:text-red-300 transition-colors\"\n                >\n                  Logout\n                </button>\n              </div>\n            ) : (\n              <AuthModal>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full border-accent text-accent hover:bg-accent hover:text-accent-foreground\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  Login / Register\n                </Button>\n              </AuthModal>\n            )}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":9489},"client/src/components/PromotionalBanners.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, ExternalLink, Gift } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { PromotionalBanner } from \"@shared/schema\";\n\n\ninterface PromotionalBannersProps {\n  position?: string;\n  className?: string;\n}\n\nexport function PromotionalBanners({ position = \"top\", className = \"\" }: PromotionalBannersProps) {\n  const [dismissedBanners, setDismissedBanners] = useState<string[]>(() => {\n    const dismissed = localStorage.getItem('dismissedBanners');\n    return dismissed ? JSON.parse(dismissed) : [];\n  });\n\n  const { data: banners = [], isLoading } = useQuery<PromotionalBanner[]>({\n    queryKey: [\"/api/promotional-banners\", position],\n    queryFn: async () => {\n      const response = await fetch(`/api/promotional-banners?position=${position}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch promotional banners');\n      }\n      return response.json();\n    },\n  });\n\n  const dismissBanner = (bannerId: string) => {\n    const newDismissed = [...dismissedBanners, bannerId];\n    setDismissedBanners(newDismissed);\n    localStorage.setItem('dismissedBanners', JSON.stringify(newDismissed));\n  };\n\n  const visibleBanners = banners.filter(banner => !dismissedBanners.includes(banner.id));\n\n  if (isLoading || visibleBanners.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`promotional-banners ${className}`}>\n      {visibleBanners.map((banner) => (\n        <Card \n          key={banner.id} \n          className=\"cosmic-bg border-cosmic-purple/30 mb-4 overflow-hidden relative group hover:border-cosmic-gold/50 transition-all duration-300\"\n          data-testid={`banner-${banner.id}`}\n        >\n          <div className=\"absolute top-2 right-2 z-10\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-6 w-6 p-0 text-cosmic-gold hover:text-white hover:bg-cosmic-purple/50 opacity-0 group-hover:opacity-100 transition-opacity\"\n              onClick={() => dismissBanner(banner.id)}\n              data-testid={`button-dismiss-${banner.id}`}\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n          </div>\n\n          <CardContent className=\"p-0\">\n            {banner.imageUrl && (\n              <div className=\"relative h-32 md:h-24 overflow-hidden\">\n                <img \n                  src={banner.imageUrl} \n                  alt={banner.title}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-cosmic-navy/70 to-transparent\" />\n              </div>\n            )}\n            \n            <div className={`p-4 ${banner.imageUrl ? 'absolute inset-0 flex flex-col justify-center' : ''}`}>\n              <div className=\"flex items-start gap-3\">\n                <Gift className=\"w-6 h-6 text-cosmic-gold flex-shrink-0 mt-1\" />\n                <div className=\"flex-1\">\n                  <h3 className=\"font-bold text-lg text-white mb-2 leading-tight\">\n                    {banner.title}\n                  </h3>\n                  {banner.description && (\n                    <p className=\"text-cosmic-gold/90 text-sm mb-3 leading-relaxed\">\n                      {banner.description}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex flex-wrap items-center gap-3\">\n                    {banner.ctaText && banner.ctaLink && (\n                      <Button \n                        size=\"sm\" \n                        className=\"cosmic-glow text-xs px-4 py-2\"\n                        onClick={() => {\n                          if (banner.ctaLink?.startsWith('/')) {\n                            window.location.href = banner.ctaLink;\n                          } else {\n                            window.open(banner.ctaLink, '_blank');\n                          }\n                        }}\n                        data-testid={`button-cta-${banner.id}`}\n                      >\n                        {banner.ctaText}\n                        <ExternalLink className=\"ml-1 h-3 w-3\" />\n                      </Button>\n                    )}\n                    \n                    {banner.discountCode && (\n                      <div className=\"bg-cosmic-gold/20 border border-cosmic-gold/40 px-3 py-1 rounded-full\">\n                        <span className=\"text-cosmic-gold text-xs font-mono font-bold\">\n                          CODE: {banner.discountCode}\n                        </span>\n                      </div>\n                    )}\n                    \n                    {banner.discountPercent && (\n                      <div className=\"bg-cosmic-purple/30 border border-cosmic-purple/50 px-3 py-1 rounded-full\">\n                        <span className=\"text-white text-xs font-bold\">\n                          {banner.discountPercent}% OFF\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {banner.validUntil && (\n                    <p className=\"text-cosmic-gold/60 text-xs mt-2\">\n                      Valid until: {new Date(banner.validUntil).toLocaleDateString()}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// Component to seed promotional banners (for demo purposes)\nexport function SeedPromotionalBanners() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const seedBanners = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/seed-promotional-banners', {\n        method: 'POST',\n      });\n      if (response.ok) {\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error seeding banners:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Button \n      onClick={seedBanners}\n      disabled={isLoading}\n      className=\"cosmic-glow\"\n      data-testid=\"button-seed-banners\"\n    >\n      {isLoading ? \"Loading...\" : \"Load Sample Promotions\"}\n    </Button>\n  );\n}","size_bytes":6271},"client/src/components/ShoppingCart.tsx":{"content":"import { X, Minus, Plus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useCart } from \"@/contexts/CartContext\";\n\nexport default function ShoppingCart() {\n  const { cartItems, isCartOpen, setIsCartOpen, updateQuantity, removeFromCart, getCartTotal } = useCart();\n\n  if (!isCartOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-6\">\n      <Card className=\"max-w-2xl w-full max-h-[80vh] overflow-hidden\">\n        <CardHeader className=\"flex flex-row items-center justify-between border-b border-border\">\n          <CardTitle>Shopping Cart</CardTitle>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={() => setIsCartOpen(false)}\n            data-testid=\"button-close-cart\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"p-6 overflow-y-auto\">\n          {cartItems.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">Your cosmic cart is empty</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">Add some celestial treasures to get started!</p>\n            </div>\n          ) : (\n            <>\n              {/* Cart Items */}\n              <div className=\"space-y-4 mb-6\">\n                {cartItems.map((item) => (\n                  <div key={item.id} className=\"flex items-center space-x-4 p-4 bg-background rounded-lg\">\n                    <img \n                      src={item.imageUrl} \n                      alt={item.name} \n                      className=\"w-16 h-16 rounded-lg object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold\">{item.name}</h4>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.id, Math.max(0, item.quantity - 1))}\n                        data-testid={`button-decrease-${item.id}`}\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span className=\"w-8 text-center\" data-testid={`quantity-${item.id}`}>{item.quantity}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                        data-testid={`button-increase-${item.id}`}\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold\">₹{(item.price * item.quantity).toFixed(2)}</div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFromCart(item.id)}\n                        className=\"text-destructive hover:text-destructive\"\n                        data-testid={`button-remove-${item.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Cart Summary */}\n              <div className=\"border-t border-border pt-6\">\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span data-testid=\"cart-subtotal\">₹{getCartTotal().toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Shipping:</span>\n                    <span className=\"text-green-500\">Free</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-semibold border-t border-border pt-2\">\n                    <span>Total:</span>\n                    <span className=\"text-accent\" data-testid=\"cart-total\">₹{getCartTotal().toFixed(2)}</span>\n                  </div>\n                </div>\n                \n                <Button \n                  className=\"w-full cosmic-glow\"\n                  data-testid=\"button-checkout\"\n                >\n                  Proceed to Checkout\n                </Button>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4776},"client/src/components/UserDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User, \n  Settings, \n  ShoppingBag, \n  Heart, \n  Scroll, \n  LogOut, \n  Calendar,\n  Mail,\n  Phone,\n  MapPin\n} from \"lucide-react\";\nimport type { Order, KundaliRequest, Product, UserCart } from \"@shared/schema\";\n\nexport function UserDashboard() {\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n\n  // Fetch user orders\n  const { data: orders = [] } = useQuery<Order[]>({\n    queryKey: [\"/api/user/orders\"],\n    enabled: !!user,\n  });\n\n  // Fetch kundali requests\n  const { data: kundaliRequests = [] } = useQuery<KundaliRequest[]>({\n    queryKey: [\"/api/user/kundali-requests\"], \n    enabled: !!user,\n  });\n\n  // Fetch liked products\n  const { data: likedProducts = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/user/liked-products\"],\n    enabled: !!user,\n  });\n\n  // Fetch user cart\n  const { data: cartItems = [] } = useQuery<(UserCart & { product: Product })[]>({\n    queryKey: [\"/api/user/cart\"],\n    enabled: !!user,\n  });\n\n  const handleLogout = async () => {\n    await logout();\n    toast({\n      title: \"Logged out successfully\",\n      description: \"Thank you for visiting Nakshatra. Come back soon!\",\n    });\n  };\n\n  if (!user) return null;\n\n  const formatPrice = (price: string | number) => {\n    const numPrice = typeof price === 'string' ? parseFloat(price) : price;\n    return `₹${numPrice.toLocaleString('en-IN')}`;\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'processing':\n        return 'outline';\n      default:\n        return 'secondary';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen cosmic-bg p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"cosmic-bg border border-cosmic-purple/30 rounded-lg p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"cosmic-glow w-16 h-16 rounded-full flex items-center justify-center\">\n                <User className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-white\">\n                  {user.firstName} {user.lastName}\n                </h1>\n                <p className=\"text-cosmic-gold\">{user.email}</p>\n                {user.lastLoginAt && (\n                  <p className=\"text-sm text-cosmic-gold/70\">\n                    Last login: {new Date(user.lastLoginAt).toLocaleDateString()}\n                  </p>\n                )}\n              </div>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={handleLogout}\n              className=\"border-cosmic-gold text-cosmic-gold hover:bg-cosmic-gold hover:text-cosmic-navy\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {/* Dashboard Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5 bg-cosmic-navy/50\">\n            <TabsTrigger value=\"profile\" className=\"data-[state=active]:bg-cosmic-purple\">\n              <User className=\"w-4 h-4 mr-2\" />\n              Profile\n            </TabsTrigger>\n            <TabsTrigger value=\"orders\" className=\"data-[state=active]:bg-cosmic-purple\">\n              <ShoppingBag className=\"w-4 h-4 mr-2\" />\n              Orders ({orders.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"kundali\" className=\"data-[state=active]:bg-cosmic-purple\">\n              <Scroll className=\"w-4 h-4 mr-2\" />\n              Kundali ({kundaliRequests.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"favorites\" className=\"data-[state=active]:bg-cosmic-purple\">\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Favorites ({likedProducts.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"cart\" className=\"data-[state=active]:bg-cosmic-purple\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Cart ({cartItems.length})\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card className=\"cosmic-bg border-cosmic-purple/30\">\n              <CardHeader>\n                <CardTitle className=\"text-cosmic-gold\">Personal Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-5 h-5 text-cosmic-gold\" />\n                    <div>\n                      <p className=\"text-sm text-cosmic-gold/70\">Email</p>\n                      <p className=\"text-white\">{user.email}</p>\n                    </div>\n                  </div>\n                  {user.phone && (\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"w-5 h-5 text-cosmic-gold\" />\n                      <div>\n                        <p className=\"text-sm text-cosmic-gold/70\">Phone</p>\n                        <p className=\"text-white\">{user.phone}</p>\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-cosmic-gold\" />\n                    <div>\n                      <p className=\"text-sm text-cosmic-gold/70\">Member Since</p>\n                      <p className=\"text-white\">{new Date(user.createdAt).toLocaleDateString()}</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-4\">\n            {orders.length === 0 ? (\n              <Card className=\"cosmic-bg border-cosmic-purple/30\">\n                <CardContent className=\"text-center py-12\">\n                  <ShoppingBag className=\"w-16 h-16 text-cosmic-gold mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold text-white mb-2\">No Orders Yet</h3>\n                  <p className=\"text-cosmic-gold/70\">Your order history will appear here</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {orders.map((order) => (\n                  <Card key={order.id} className=\"cosmic-bg border-cosmic-purple/30\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-sm text-cosmic-gold/70\">Order #{order.id.slice(-8)}</p>\n                          <p className=\"text-lg font-bold text-white\">{formatPrice(order.totalAmount)}</p>\n                        </div>\n                        <Badge variant={getStatusBadgeVariant(order.status!)}>\n                          {order.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-cosmic-gold/70\">\n                        Ordered on {new Date(order.createdAt).toLocaleDateString()}\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Kundali Tab */}\n          <TabsContent value=\"kundali\" className=\"space-y-4\">\n            {kundaliRequests.length === 0 ? (\n              <Card className=\"cosmic-bg border-cosmic-purple/30\">\n                <CardContent className=\"text-center py-12\">\n                  <Scroll className=\"w-16 h-16 text-cosmic-gold mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold text-white mb-2\">No Kundali Requests</h3>\n                  <p className=\"text-cosmic-gold/70\">Your Kundali readings will appear here</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {kundaliRequests.map((request) => (\n                  <Card key={request.id} className=\"cosmic-bg border-cosmic-purple/30\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-lg font-bold text-white\">{request.kundaliType}</p>\n                          <p className=\"text-sm text-cosmic-gold/70\">for {request.fullName}</p>\n                        </div>\n                        <Badge variant={getStatusBadgeVariant(request.status!)}>\n                          {request.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-cosmic-gold\">{formatPrice(request.price)}</p>\n                      <p className=\"text-sm text-cosmic-gold/70\">\n                        Requested on {new Date(request.createdAt).toLocaleDateString()}\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Favorites Tab */}\n          <TabsContent value=\"favorites\" className=\"space-y-4\">\n            {likedProducts.length === 0 ? (\n              <Card className=\"cosmic-bg border-cosmic-purple/30\">\n                <CardContent className=\"text-center py-12\">\n                  <Heart className=\"w-16 h-16 text-cosmic-gold mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold text-white mb-2\">No Favorites Yet</h3>\n                  <p className=\"text-cosmic-gold/70\">Products you like will appear here</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {likedProducts.map((product) => (\n                  <Card key={product.id} className=\"cosmic-bg border-cosmic-purple/30\">\n                    <CardContent className=\"p-4\">\n                      <img \n                        src={product.imageUrl || ''} \n                        alt={product.name}\n                        className=\"w-full h-32 object-cover rounded mb-4\"\n                      />\n                      <h3 className=\"font-bold text-white mb-2\">{product.name}</h3>\n                      <p className=\"text-cosmic-gold font-bold\">{formatPrice(product.price)}</p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Cart Tab */}\n          <TabsContent value=\"cart\" className=\"space-y-4\">\n            {cartItems.length === 0 ? (\n              <Card className=\"cosmic-bg border-cosmic-purple/30\">\n                <CardContent className=\"text-center py-12\">\n                  <Settings className=\"w-16 h-16 text-cosmic-gold mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold text-white mb-2\">Cart is Empty</h3>\n                  <p className=\"text-cosmic-gold/70\">Items in your cart will appear here</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {cartItems.map((item) => (\n                  <Card key={item.id} className=\"cosmic-bg border-cosmic-purple/30\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-4\">\n                        <img \n                          src={item.product.imageUrl || ''} \n                          alt={item.product.name}\n                          className=\"w-16 h-16 object-cover rounded\"\n                        />\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-white\">{item.product.name}</h3>\n                          <p className=\"text-cosmic-gold\">Quantity: {item.quantity}</p>\n                          <p className=\"text-cosmic-gold font-bold\">{formatPrice(item.product.price)}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":12972},"client/src/contexts/CartContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  imageUrl: string;\n  quantity: number;\n}\n\ninterface CartContextType {\n  cartItems: CartItem[];\n  isCartOpen: boolean;\n  setIsCartOpen: (open: boolean) => void;\n  addToCart: (item: Omit<CartItem, 'quantity'> & { quantity?: number }) => void;\n  removeFromCart: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  getCartTotal: () => number;\n  clearCart: () => void;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: ReactNode }) {\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [isCartOpen, setIsCartOpen] = useState(false);\n\n  const addToCart = (item: Omit<CartItem, 'quantity'> & { quantity?: number }) => {\n    setCartItems(prev => {\n      const existingItem = prev.find(cartItem => cartItem.id === item.id);\n      if (existingItem) {\n        return prev.map(cartItem =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity + (item.quantity || 1) }\n            : cartItem\n        );\n      }\n      return [...prev, { ...item, quantity: item.quantity || 1 }];\n    });\n  };\n\n  const removeFromCart = (id: string) => {\n    setCartItems(prev => prev.filter(item => item.id !== id));\n  };\n\n  const updateQuantity = (id: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(id);\n      return;\n    }\n    setCartItems(prev =>\n      prev.map(item =>\n        item.id === id ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  return (\n    <CartContext.Provider value={{\n      cartItems,\n      isCartOpen,\n      setIsCartOpen,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      getCartTotal,\n      clearCart,\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":2291},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import React, { useState, useEffect, createContext, useContext } from 'react';\nimport type { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  register: (userData: RegisterData) => Promise<{ success: boolean; error?: string }>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  phone?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const refreshUser = async () => {\n    try {\n      const response = await fetch('/api/auth/me');\n      if (response.ok) {\n        const { user } = await response.json();\n        setUser(user);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, error: data.message || 'Login failed' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error. Please try again.' };\n    }\n  };\n\n  const register = async (userData: RegisterData) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, error: data.message || 'Registration failed' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error. Please try again.' };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', { method: 'POST' });\n      setUser(null);\n    } catch (error) {\n      console.error('Logout error:', error);\n      setUser(null);\n    }\n  };\n\n  useEffect(() => {\n    refreshUser();\n  }, []);\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    refreshUser,\n  };\n\n  return React.createElement(\n    AuthContext.Provider,\n    { value },\n    children\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":3134},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport const api = {\n  // Products\n  getProducts: (category?: string) => {\n    const url = category ? `/api/products?category=${category}` : '/api/products';\n    return fetch(url).then(res => res.json());\n  },\n\n  getProduct: (id: string) => {\n    return fetch(`/api/products/${id}`).then(res => res.json());\n  },\n\n  // Kundali\n  createKundaliRequest: (data: any) => {\n    return apiRequest('POST', '/api/kundali', data);\n  },\n\n  // Chat\n  sendChatMessage: (message: string, userId?: string) => {\n    return apiRequest('POST', '/api/chat', { message, userId });\n  },\n\n  getChatHistory: (userId: string) => {\n    return fetch(`/api/chat/history/${userId}`).then(res => res.json());\n  },\n\n  // Contact\n  sendContactMessage: (data: any) => {\n    return apiRequest('POST', '/api/contact', data);\n  },\n\n  // Orders\n  createOrder: (data: any) => {\n    return apiRequest('POST', '/api/orders', data);\n  },\n\n  createOrderItem: (data: any) => {\n    return apiRequest('POST', '/api/order-items', data);\n  },\n};\n","size_bytes":1045},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport HeroSection from \"@/components/HeroSection\";\nimport KundaliSection from \"@/components/KundaliSection\";\nimport CelestialStore from \"@/components/CelestialStore\";\nimport AstroAIChat from \"@/components/AstroAIChat\";\nimport JourneySection from \"@/components/JourneySection\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\nimport { PromotionalBanners, SeedPromotionalBanners } from \"@/components/PromotionalBanners\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Navigation />\n      \n      {/* Top promotional banners */}\n      <div className=\"container mx-auto px-6 pt-20\">\n        <PromotionalBanners position=\"top\" />\n      </div>\n      \n      <HeroSection />\n      \n      {/* Main banner promotions */}\n      <div className=\"container mx-auto px-6 py-8\">\n        <PromotionalBanners position=\"banner\" />\n      </div>\n      \n      <KundaliSection />\n      <CelestialStore />\n      <AstroAIChat />\n      \n      {/* Sidebar/bottom promotions */}\n      <div className=\"container mx-auto px-6 py-8\">\n        <PromotionalBanners position=\"sidebar\" />\n      </div>\n      \n      <JourneySection />\n      \n      {/* Demo seed button for promotional banners */}\n      <div className=\"container mx-auto px-6 py-8 text-center\">\n        <div className=\"cosmic-bg border border-cosmic-purple/30 rounded-lg p-6\">\n          <h3 className=\"text-xl font-bold text-cosmic-gold mb-4\">\n            🎯 Admin Demo: Load Sample Promotions\n          </h3>\n          <p className=\"text-cosmic-gold/80 mb-4\">\n            Click below to populate the promotional banners with sample offers and deals\n          </p>\n          <SeedPromotionalBanners />\n        </div>\n      </div>\n      \n      <ContactSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1900},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, LogIn, UserPlus } from \"lucide-react\";\n\ninterface AuthModalProps {\n  children: React.ReactNode;\n}\n\nexport function AuthModal({ children }: AuthModalProps) {\n  const [open, setOpen] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n\n  const [loginData, setLoginData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [registerData, setRegisterData] = useState({\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phone: \"\",\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const result = await login(loginData.email, loginData.password);\n\n    if (result.success) {\n      setOpen(false);\n      toast({\n        title: \"Welcome back! 🌟\",\n        description: \"You have been logged in successfully.\",\n      });\n      // Reset form\n      setLoginData({ email: \"\", password: \"\" });\n    } else {\n      toast({\n        title: \"Login Failed\",\n        description: result.error,\n        variant: \"destructive\",\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const result = await register(registerData);\n\n    if (result.success) {\n      setOpen(false);\n      toast({\n        title: \"Welcome to Nakshatra! ✨\",\n        description: \"Your account has been created successfully.\",\n      });\n      // Reset form\n      setRegisterData({\n        email: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        phone: \"\",\n      });\n    } else {\n      toast({\n        title: \"Registration Failed\",\n        description: result.error,\n        variant: \"destructive\",\n      });\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px] cosmic-bg border-cosmic-purple/30\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-cosmic-gold text-2xl font-bold\">\n            Join the Cosmic Journey\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-cosmic-navy/50\">\n            <TabsTrigger value=\"login\" className=\"data-[state=active]:bg-cosmic-purple data-[state=active]:text-white\">\n              <LogIn className=\"w-4 h-4 mr-2\" />\n              Login\n            </TabsTrigger>\n            <TabsTrigger value=\"register\" className=\"data-[state=active]:bg-cosmic-purple data-[state=active]:text-white\">\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Register\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-email\" className=\"text-cosmic-gold\">Email</Label>\n                <Input\n                  id=\"login-email\"\n                  type=\"email\"\n                  value={loginData.email}\n                  onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}\n                  placeholder=\"Enter your email\"\n                  className=\"cosmic-input\"\n                  required\n                  data-testid=\"input-login-email\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-password\" className=\"text-cosmic-gold\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"login-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={loginData.password}\n                    onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                    placeholder=\"Enter your password\"\n                    className=\"cosmic-input pr-10\"\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-cosmic-gold\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-cosmic-gold\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full cosmic-glow\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Signing In...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"register\">\n            <form onSubmit={handleRegister} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-firstName\" className=\"text-cosmic-gold\">First Name</Label>\n                  <Input\n                    id=\"register-firstName\"\n                    value={registerData.firstName}\n                    onChange={(e) => setRegisterData({ ...registerData, firstName: e.target.value })}\n                    placeholder=\"First name\"\n                    className=\"cosmic-input\"\n                    required\n                    data-testid=\"input-register-firstName\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-lastName\" className=\"text-cosmic-gold\">Last Name</Label>\n                  <Input\n                    id=\"register-lastName\"\n                    value={registerData.lastName}\n                    onChange={(e) => setRegisterData({ ...registerData, lastName: e.target.value })}\n                    placeholder=\"Last name\"\n                    className=\"cosmic-input\"\n                    required\n                    data-testid=\"input-register-lastName\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-email\" className=\"text-cosmic-gold\">Email</Label>\n                <Input\n                  id=\"register-email\"\n                  type=\"email\"\n                  value={registerData.email}\n                  onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}\n                  placeholder=\"Enter your email\"\n                  className=\"cosmic-input\"\n                  required\n                  data-testid=\"input-register-email\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-phone\" className=\"text-cosmic-gold\">Phone (Optional)</Label>\n                <Input\n                  id=\"register-phone\"\n                  type=\"tel\"\n                  value={registerData.phone}\n                  onChange={(e) => setRegisterData({ ...registerData, phone: e.target.value })}\n                  placeholder=\"Enter your phone number\"\n                  className=\"cosmic-input\"\n                  data-testid=\"input-register-phone\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-password\" className=\"text-cosmic-gold\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"register-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={registerData.password}\n                    onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                    placeholder=\"Create a password (min 8 characters)\"\n                    className=\"cosmic-input pr-10\"\n                    minLength={8}\n                    required\n                    data-testid=\"input-register-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-cosmic-gold\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-cosmic-gold\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full cosmic-glow\"\n                disabled={isLoading}\n                data-testid=\"button-register\"\n              >\n                {isLoading ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9864},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/admin/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  LogOut, \n  Package, \n  ShoppingCart, \n  Star, \n  Users,\n  BarChart3,\n  Settings \n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface AdminDashboardProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  children: React.ReactNode;\n}\n\nconst navigationItems = [\n  { id: \"overview\", label: \"Overview\", icon: BarChart3 },\n  { id: \"products\", label: \"Products\", icon: Package },\n  { id: \"orders\", label: \"Orders\", icon: ShoppingCart },\n  { id: \"kundali\", label: \"Kundali Types\", icon: Star },\n  { id: \"users\", label: \"Users\", icon: Users },\n  { id: \"settings\", label: \"Settings\", icon: Settings },\n];\n\nexport default function AdminDashboard({ activeTab, onTabChange, children }: AdminDashboardProps) {\n  const { admin, logout } = useAdmin();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out of the admin portal.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Logout Error\",\n        description: \"An error occurred while logging out.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-cosmic-navy via-cosmic-purple to-cosmic-navy\">\n      {/* Header */}\n      <header className=\"bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border/50\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-6\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Site\n                </Button>\n              </Link>\n              <div className=\"h-6 w-px bg-border\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-accent\">Nakshatra Admin</h1>\n                <p className=\"text-sm text-muted-foreground\">Administration Portal</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-sm\">\n                <span className=\"text-muted-foreground\">Welcome, </span>\n                <span className=\"font-medium\">{admin?.username}</span>\n              </div>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-12 gap-6\">\n          {/* Sidebar Navigation */}\n          <div className=\"col-span-12 lg:col-span-3\">\n            <Card className=\"border-border/50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Navigation</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <nav className=\"space-y-1\">\n                  {navigationItems.map((item) => {\n                    const Icon = item.icon;\n                    return (\n                      <button\n                        key={item.id}\n                        onClick={() => onTabChange(item.id)}\n                        className={`w-full flex items-center gap-3 px-6 py-3 text-left transition-colors ${\n                          activeTab === item.id\n                            ? \"bg-accent/10 text-accent border-r-2 border-accent\"\n                            : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\n                        }`}\n                      >\n                        <Icon className=\"w-4 h-4\" />\n                        {item.label}\n                      </button>\n                    );\n                  })}\n                </nav>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"col-span-12 lg:col-span-9\">\n            <Card className=\"border-border/50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n              <CardContent className=\"p-6\">\n                {children}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4722},"client/src/components/admin/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Lock, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function AdminLogin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAdmin();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const result = await login(username, password);\n      if (result.success) {\n        toast({\n          title: \"Welcome, Administrator! 🔑\",\n          description: \"You have successfully logged into the admin portal.\",\n        });\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: result.error || \"Invalid credentials. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-cosmic-navy via-cosmic-purple to-cosmic-navy flex items-center justify-center p-6\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-white hover:bg-white/10\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"border-border/50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mb-4\">\n              <Lock className=\"w-6 h-6 text-accent\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Admin Portal</CardTitle>\n            <p className=\"text-muted-foreground\">\n              Sign in to access the Nakshatra administration panel\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter admin username\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    className=\"pl-10\"\n                    required\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter admin password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10\"\n                    required\n                  />\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full cosmic-glow\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Signing In...\" : \"Sign In to Admin Portal\"}\n              </Button>\n            </form>\n            \n            <div className=\"mt-6 p-4 bg-muted/50 rounded-lg\">\n              <p className=\"text-sm text-muted-foreground text-center\">\n                <strong>Demo Credentials:</strong><br />\n                Username: admin<br />\n                Password: admin123\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4592},"client/src/components/admin/AdminOrderManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Eye, Edit, Package, Truck } from \"lucide-react\";\n\n// Placeholder data - will be replaced with real API calls\nconst sampleOrders = [\n  {\n    id: \"ORD-001\",\n    customer: \"Priya Sharma\",\n    email: \"priya@example.com\",\n    amount: \"₹2,450\",\n    status: \"new\",\n    items: 3,\n    createdAt: \"2025-09-28\",\n    trackingId: \"\",\n    courierPartner: \"\",\n  },\n  {\n    id: \"ORD-002\", \n    customer: \"Rahul Kumar\",\n    email: \"rahul@example.com\",\n    amount: \"₹1,890\",\n    status: \"in_progress\",\n    items: 2,\n    createdAt: \"2025-09-27\",\n    trackingId: \"TRK-12345\",\n    courierPartner: \"Blue Dart\",\n  },\n  {\n    id: \"ORD-003\",\n    customer: \"Anita Patel\",\n    email: \"anita@example.com\", \n    amount: \"₹3,200\",\n    status: \"completed\",\n    items: 4,\n    createdAt: \"2025-09-26\",\n    trackingId: \"TRK-67890\",\n    courierPartner: \"FedEx\",\n  }\n];\n\nconst orderStatuses = [\n  { value: \"all\", label: \"All Orders\" },\n  { value: \"new\", label: \"New\" },\n  { value: \"in_queue\", label: \"In Queue\" },\n  { value: \"in_progress\", label: \"In Progress\" },\n  { value: \"completed\", label: \"Completed\" },\n];\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"new\":\n      return \"bg-blue-500/10 text-blue-500 border-blue-500/20\";\n    case \"in_queue\":\n      return \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\";\n    case \"in_progress\":\n      return \"bg-orange-500/10 text-orange-500 border-orange-500/20\";\n    case \"completed\":\n      return \"bg-green-500/10 text-green-500 border-green-500/20\";\n    default:\n      return \"bg-gray-500/10 text-gray-500 border-gray-500/20\";\n  }\n};\n\nexport default function AdminOrderManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n\n  const filteredOrders = sampleOrders.filter(order => {\n    const matchesSearch = \n      order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customer.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = selectedStatus === \"all\" || order.status === selectedStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-accent mb-2\">Order Management</h1>\n        <p className=\"text-muted-foreground\">\n          Track and manage customer orders, update shipping details, and monitor order progress.\n        </p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        {[\n          { label: \"New Orders\", value: \"5\", color: \"text-blue-500\" },\n          { label: \"In Queue\", value: \"8\", color: \"text-yellow-500\" },\n          { label: \"In Progress\", value: \"12\", color: \"text-orange-500\" },\n          { label: \"Completed\", value: \"156\", color: \"text-green-500\" },\n        ].map((stat, index) => (\n          <Card key={index} className=\"border-border/50\">\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <div className={`text-2xl font-bold ${stat.color}`}>{stat.value}</div>\n                <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Filters */}\n      <Card className=\"border-border/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search orders by ID, customer, or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"w-full md:w-48\">\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {orderStatuses.map((status) => (\n                    <SelectItem key={status.value} value={status.value}>\n                      {status.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Orders Table */}\n      <Card className=\"border-border/50\">\n        <CardHeader>\n          <CardTitle>Orders ({filteredOrders.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border/50\">\n                  <th className=\"text-left p-4 font-medium\">Order ID</th>\n                  <th className=\"text-left p-4 font-medium\">Customer</th>\n                  <th className=\"text-left p-4 font-medium\">Amount</th>\n                  <th className=\"text-left p-4 font-medium\">Items</th>\n                  <th className=\"text-left p-4 font-medium\">Status</th>\n                  <th className=\"text-left p-4 font-medium\">Date</th>\n                  <th className=\"text-left p-4 font-medium\">Tracking</th>\n                  <th className=\"text-left p-4 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredOrders.map((order) => (\n                  <tr key={order.id} className=\"border-b border-border/50 hover:bg-muted/50\">\n                    <td className=\"p-4\">\n                      <div className=\"font-medium\">{order.id}</div>\n                    </td>\n                    <td className=\"p-4\">\n                      <div>\n                        <div className=\"font-medium\">{order.customer}</div>\n                        <div className=\"text-sm text-muted-foreground\">{order.email}</div>\n                      </div>\n                    </td>\n                    <td className=\"p-4 font-medium\">{order.amount}</td>\n                    <td className=\"p-4\">{order.items} items</td>\n                    <td className=\"p-4\">\n                      <Badge className={getStatusColor(order.status)} variant=\"outline\">\n                        {order.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"p-4 text-sm text-muted-foreground\">{order.createdAt}</td>\n                    <td className=\"p-4\">\n                      {order.trackingId ? (\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium\">{order.trackingId}</div>\n                          <div className=\"text-muted-foreground\">{order.courierPartner}</div>\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground text-sm\">Not assigned</span>\n                      )}\n                    </td>\n                    <td className=\"p-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Package className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Truck className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8449},"client/src/components/admin/AdminOverview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Package, ShoppingCart, Star, Users, DollarSign, TrendingUp } from \"lucide-react\";\n\nconst statsData = [\n  {\n    title: \"Total Products\",\n    value: \"124\",\n    change: \"+12%\",\n    trend: \"up\",\n    icon: Package,\n  },\n  {\n    title: \"Active Orders\",\n    value: \"18\",\n    change: \"+5%\",\n    trend: \"up\",\n    icon: ShoppingCart,\n  },\n  {\n    title: \"Kundali Requests\",\n    value: \"34\",\n    change: \"+23%\",\n    trend: \"up\",\n    icon: Star,\n  },\n  {\n    title: \"Total Users\",\n    value: \"1,204\",\n    change: \"+8%\",\n    trend: \"up\",\n    icon: Users,\n  },\n  {\n    title: \"Monthly Revenue\",\n    value: \"₹45,230\",\n    change: \"+15%\",\n    trend: \"up\",\n    icon: DollarSign,\n  },\n  {\n    title: \"Growth Rate\",\n    value: \"12.5%\",\n    change: \"+2.1%\",\n    trend: \"up\",\n    icon: TrendingUp,\n  },\n];\n\nexport default function AdminOverview() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-accent mb-2\">Dashboard Overview</h1>\n        <p className=\"text-muted-foreground\">\n          Welcome to the Nakshatra administration panel. Here's a quick overview of your platform's performance.\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {statsData.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"border-border/50\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">{stat.title}</CardTitle>\n                <Icon className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  <span className={`${stat.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                    {stat.change}\n                  </span>{\" \"}\n                  from last month\n                </p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"border-border/50\">\n          <CardHeader>\n            <CardTitle>Recent Orders</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { id: \"ORD-001\", customer: \"Priya Sharma\", amount: \"₹2,450\", status: \"Processing\" },\n                { id: \"ORD-002\", customer: \"Rahul Kumar\", amount: \"₹1,890\", status: \"Shipped\" },\n                { id: \"ORD-003\", customer: \"Anita Patel\", amount: \"₹3,200\", status: \"Delivered\" },\n              ].map((order) => (\n                <div key={order.id} className=\"flex items-center justify-between py-2 border-b border-border/50 last:border-0\">\n                  <div>\n                    <p className=\"font-medium\">{order.id}</p>\n                    <p className=\"text-sm text-muted-foreground\">{order.customer}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{order.amount}</p>\n                    <p className=\"text-sm text-muted-foreground\">{order.status}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-border/50\">\n          <CardHeader>\n            <CardTitle>Top Products</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { name: \"Rudraksha Mala\", sales: 45, revenue: \"₹18,000\" },\n                { name: \"Crystal Healing Set\", sales: 32, revenue: \"₹12,800\" },\n                { name: \"Gemstone Ring\", sales: 28, revenue: \"₹22,400\" },\n              ].map((product, index) => (\n                <div key={index} className=\"flex items-center justify-between py-2 border-b border-border/50 last:border-0\">\n                  <div>\n                    <p className=\"font-medium\">{product.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{product.sales} units sold</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{product.revenue}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4648},"client/src/components/admin/AdminPage.tsx":{"content":"import { useState } from \"react\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport AdminLogin from \"./AdminLogin\";\nimport AdminDashboard from \"./AdminDashboard\";\nimport AdminOverview from \"./AdminOverview\";\nimport AdminProductManagement from \"./AdminProductManagement\";\nimport AdminOrderManagement from \"./AdminOrderManagement\";\n\nexport default function AdminPage() {\n  const { isAuthenticated, isLoading } = useAdmin();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-cosmic-navy via-cosmic-purple to-cosmic-navy flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-accent\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <AdminLogin />;\n  }\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"overview\":\n        return <AdminOverview />;\n      case \"products\":\n        return <AdminProductManagement />;\n      case \"orders\":\n        return <AdminOrderManagement />;\n      case \"kundali\":\n        return (\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold mb-4\">Kundali Types Management</h2>\n            <p className=\"text-muted-foreground\">Coming soon...</p>\n          </div>\n        );\n      case \"users\":\n        return (\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold mb-4\">User Management</h2>\n            <p className=\"text-muted-foreground\">Coming soon...</p>\n          </div>\n        );\n      case \"settings\":\n        return (\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold mb-4\">Settings</h2>\n            <p className=\"text-muted-foreground\">Coming soon...</p>\n          </div>\n        );\n      default:\n        return <AdminOverview />;\n    }\n  };\n\n  return (\n    <AdminDashboard activeTab={activeTab} onTabChange={setActiveTab}>\n      {renderContent()}\n    </AdminDashboard>\n  );\n}","size_bytes":2028},"client/src/components/admin/AdminProductManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Plus, Edit, Trash2, Eye } from \"lucide-react\";\n\n// Placeholder data - will be replaced with real API calls\nconst sampleProducts = [\n  {\n    id: \"1\",\n    name: \"Rudraksha Mala\",\n    category: \"spiritual\",\n    price: \"₹1,250\",\n    stock: 45,\n    status: \"Active\",\n    imageUrl: \"https://images.unsplash.com/photo-1602173574767-37ac01994b2a\"\n  },\n  {\n    id: \"2\", \n    name: \"Crystal Healing Set\",\n    category: \"crystals\",\n    price: \"₹2,800\",\n    stock: 12,\n    status: \"Active\",\n    imageUrl: \"https://images.unsplash.com/photo-1602173574767-37ac01994b2a\"\n  },\n  {\n    id: \"3\",\n    name: \"Gemstone Ring\",\n    category: \"jewelry\",\n    price: \"₹4,500\",\n    stock: 0,\n    status: \"Out of Stock\",\n    imageUrl: \"https://images.unsplash.com/photo-1602173574767-37ac01994b2a\"\n  }\n];\n\nexport default function AdminProductManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const categories = [\n    { id: \"all\", name: \"All Categories\" },\n    { id: \"spiritual\", name: \"Spiritual Items\" },\n    { id: \"crystals\", name: \"Crystals\" },\n    { id: \"jewelry\", name: \"Jewelry\" },\n    { id: \"books\", name: \"Books\" },\n  ];\n\n  const filteredProducts = sampleProducts.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-accent mb-2\">Product Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your celestial treasures and spiritual products.\n          </p>\n        </div>\n        <Button className=\"cosmic-glow\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add New Product\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"border-border/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search products...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              {categories.map((category) => (\n                <Button\n                  key={category.id}\n                  variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category.id)}\n                >\n                  {category.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Products Table */}\n      <Card className=\"border-border/50\">\n        <CardHeader>\n          <CardTitle>Products ({filteredProducts.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border/50\">\n                  <th className=\"text-left p-4 font-medium\">Product</th>\n                  <th className=\"text-left p-4 font-medium\">Category</th>\n                  <th className=\"text-left p-4 font-medium\">Price</th>\n                  <th className=\"text-left p-4 font-medium\">Stock</th>\n                  <th className=\"text-left p-4 font-medium\">Status</th>\n                  <th className=\"text-left p-4 font-medium\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredProducts.map((product) => (\n                  <tr key={product.id} className=\"border-b border-border/50 hover:bg-muted/50\">\n                    <td className=\"p-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <img \n                          src={product.imageUrl} \n                          alt={product.name}\n                          className=\"w-12 h-12 rounded-lg object-cover\"\n                        />\n                        <div>\n                          <p className=\"font-medium\">{product.name}</p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"p-4\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {product.category}\n                      </Badge>\n                    </td>\n                    <td className=\"p-4 font-medium\">{product.price}</td>\n                    <td className=\"p-4\">\n                      <span className={product.stock === 0 ? \"text-red-500\" : \"text-foreground\"}>\n                        {product.stock}\n                      </span>\n                    </td>\n                    <td className=\"p-4\">\n                      <Badge \n                        variant={product.status === \"Active\" ? \"default\" : \"destructive\"}\n                        className=\"capitalize\"\n                      >\n                        {product.status}\n                      </Badge>\n                    </td>\n                    <td className=\"p-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-red-500 hover:text-red-700\">\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6555},"client/src/hooks/useAdmin.tsx":{"content":"import React, { useState, useEffect, createContext, useContext } from 'react';\n\ninterface AdminContextType {\n  admin: { username: string; role: string } | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  logout: () => Promise<void>;\n  refreshAdmin: () => Promise<void>;\n}\n\nconst AdminContext = createContext<AdminContextType | null>(null);\n\ninterface AdminProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AdminProvider({ children }: AdminProviderProps) {\n  const [admin, setAdmin] = useState<{ username: string; role: string } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const refreshAdmin = async () => {\n    try {\n      const response = await fetch('/api/admin/me');\n      if (response.ok) {\n        const { admin } = await response.json();\n        setAdmin(admin);\n      } else {\n        setAdmin(null);\n      }\n    } catch (error) {\n      setAdmin(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (username: string, password: string) => {\n    try {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setAdmin(data.admin);\n        return { success: true };\n      } else {\n        return { success: false, error: data.message || 'Admin login failed' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error. Please try again.' };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/admin/logout', { method: 'POST' });\n      setAdmin(null);\n    } catch (error) {\n      console.error('Admin logout error:', error);\n      setAdmin(null);\n    }\n  };\n\n  useEffect(() => {\n    refreshAdmin();\n  }, []);\n\n  const contextValue: AdminContextType = {\n    admin,\n    isLoading,\n    isAuthenticated: !!admin,\n    login,\n    logout,\n    refreshAdmin,\n  };\n\n  return (\n    <AdminContext.Provider value={contextValue}>\n      {children}\n    </AdminContext.Provider>\n  );\n}\n\nexport function useAdmin() {\n  const context = useContext(AdminContext);\n  if (!context) {\n    throw new Error('useAdmin must be used within an AdminProvider');\n  }\n  return context;\n}","size_bytes":2407},"client/src/components/ProductDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Heart, ShoppingCart, Star, Truck, Shield, RotateCcw } from \"lucide-react\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { useCart } from \"../contexts/CartContext\";\nimport { useToast } from \"../hooks/use-toast\";\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  category: string;\n  imageUrl?: string;\n  stock: number;\n  isActive: boolean;\n  rating?: number;\n  reviews?: number;\n  features?: string[];\n  materials?: string[];\n  dimensions?: string;\n  weight?: string;\n}\n\nexport default function ProductDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [quantity, setQuantity] = useState(1);\n  const { addToCart } = useCart();\n  const { toast } = useToast();\n\n  const { data: product, isLoading, error } = useQuery<Product>({\n    queryKey: [`/api/products/${id}`],\n    enabled: !!id,\n  });\n\n  // Sample additional images for demonstration\n  const productImages = product?.imageUrl ? [\n    product.imageUrl,\n    product.imageUrl.replace('photo-1602173574767', 'photo-1589656966895'), // Different angle\n    product.imageUrl.replace('photo-1602173574767', 'photo-1544947950-fa07a98d237f'), // Close-up\n    product.imageUrl.replace('photo-1602173574767', 'photo-1518837695005'), // Lifestyle\n  ] : [];\n\n  const handleAddToCart = () => {\n    if (!product) return;\n    \n    addToCart({\n      id: product.id,\n      name: product.name,\n      price: parseFloat(product.price),\n      imageUrl: product.imageUrl || \"\",\n      quantity,\n    });\n\n    toast({\n      title: \"Added to Cart! ✨\",\n      description: `${quantity} x ${product.name} added to your cosmic collection.`,\n    });\n  };\n\n  const handleQuantityChange = (change: number) => {\n    const newQuantity = quantity + change;\n    if (newQuantity >= 1 && newQuantity <= (product?.stock || 0)) {\n      setQuantity(newQuantity);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-cosmic-navy pt-20 px-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-cosmic-purple/20 rounded w-32 mb-8\"></div>\n            <div className=\"grid lg:grid-cols-2 gap-12\">\n              <div className=\"space-y-4\">\n                <div className=\"aspect-square bg-cosmic-purple/20 rounded-lg\"></div>\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"aspect-square bg-cosmic-purple/20 rounded\"></div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"space-y-6\">\n                <div className=\"h-8 bg-cosmic-purple/20 rounded w-3/4\"></div>\n                <div className=\"h-6 bg-cosmic-purple/20 rounded w-1/2\"></div>\n                <div className=\"h-24 bg-cosmic-purple/20 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"min-h-screen bg-cosmic-navy pt-20 px-6\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <Link href=\"/#store\">\n            <Button variant=\"outline\" className=\"mb-8\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Store\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-serif text-cosmic-gold mb-4\">Product Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">The celestial treasure you're looking for couldn't be found.</p>\n          <Link href=\"/#store\">\n            <Button>Return to Store</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cosmic-navy pt-20 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Navigation */}\n        <div className=\"mb-8\">\n          <Link href=\"/#store\">\n            <Button variant=\"outline\" className=\"cosmic-glow\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Store\n            </Button>\n          </Link>\n          <nav className=\"text-sm text-muted-foreground mt-4\">\n            <Link href=\"/\" className=\"hover:text-cosmic-gold\">Home</Link>\n            <span className=\"mx-2\">/</span>\n            <Link href=\"/#store\" className=\"hover:text-cosmic-gold\">Store</Link>\n            <span className=\"mx-2\">/</span>\n            <span className=\"text-cosmic-gold capitalize\">{product.category}</span>\n            <span className=\"mx-2\">/</span>\n            <span className=\"text-foreground\">{product.name}</span>\n          </nav>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Image Gallery */}\n          <div className=\"space-y-4\">\n            <Card className=\"border-cosmic-purple/30 overflow-hidden\">\n              <div className=\"aspect-square bg-cosmic-purple/10 flex items-center justify-center\">\n                <img\n                  src={productImages[selectedImageIndex] || product.imageUrl}\n                  alt={product.name}\n                  className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                />\n              </div>\n            </Card>\n            \n            {/* Thumbnail Gallery */}\n            <div className=\"grid grid-cols-4 gap-2\">\n              {productImages.map((image, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedImageIndex(index)}\n                  className={`aspect-square rounded-lg overflow-hidden border-2 transition-all ${\n                    selectedImageIndex === index \n                      ? \"border-cosmic-gold ring-2 ring-cosmic-gold/50\" \n                      : \"border-cosmic-purple/30 hover:border-cosmic-purple/60\"\n                  }`}\n                >\n                  <img\n                    src={image}\n                    alt={`${product.name} view ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Product Information */}\n          <div className=\"space-y-6\">\n            <div>\n              <Badge variant=\"outline\" className=\"mb-4 capitalize\">\n                {product.category}\n              </Badge>\n              <h1 className=\"text-4xl font-serif font-bold text-cosmic-gold mb-4\">\n                {product.name}\n              </h1>\n              \n              {/* Rating */}\n              <div className=\"flex items-center gap-2 mb-4\">\n                <div className=\"flex\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`w-5 h-5 ${\n                        i < (product.rating || 4) \n                          ? \"fill-cosmic-gold text-cosmic-gold\" \n                          : \"text-muted-foreground\"\n                      }`}\n                    />\n                  ))}\n                </div>\n                <span className=\"text-sm text-muted-foreground\">\n                  ({product.reviews || 127} reviews)\n                </span>\n              </div>\n\n              <p className=\"text-3xl font-bold text-cosmic-gold mb-6\">\n                ₹{parseFloat(product.price).toLocaleString()}\n              </p>\n            </div>\n\n            <div className=\"prose prose-invert max-w-none\">\n              <p className=\"text-muted-foreground leading-relaxed\">\n                {product.description || \"This sacred item carries the ancient wisdom of the cosmos, carefully crafted to enhance your spiritual journey and bring positive energies into your life.\"}\n              </p>\n            </div>\n\n            {/* Features */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3 text-cosmic-gold\">Features & Benefits</h3>\n              <ul className=\"space-y-2\">\n                {(product.features || [\n                  \"Authentic spiritual energy\",\n                  \"Handcrafted with cosmic precision\",\n                  \"Blessed by ancient rituals\",\n                  \"Suitable for meditation and healing\"\n                ]).map((feature, index) => (\n                  <li key={index} className=\"flex items-center gap-2 text-muted-foreground\">\n                    <div className=\"w-1.5 h-1.5 bg-cosmic-gold rounded-full\"></div>\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Quantity and Add to Cart */}\n            <Card className=\"border-cosmic-purple/30 bg-cosmic-purple/5\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span className=\"text-sm font-medium\">Quantity:</span>\n                  <div className=\"flex items-center gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleQuantityChange(-1)}\n                      disabled={quantity <= 1}\n                    >\n                      -\n                    </Button>\n                    <span className=\"w-12 text-center font-medium\">{quantity}</span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleQuantityChange(1)}\n                      disabled={quantity >= product.stock}\n                    >\n                      +\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={handleAddToCart}\n                    className=\"flex-1 cosmic-glow\"\n                    disabled={product.stock === 0}\n                  >\n                    <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                    {product.stock === 0 ? \"Out of Stock\" : \"Add to Cart\"}\n                  </Button>\n                  <Button variant=\"outline\" size=\"icon\">\n                    <Heart className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                <div className=\"text-sm text-muted-foreground mt-3\">\n                  {product.stock > 0 ? (\n                    <span className=\"text-green-400\">✓ {product.stock} items in stock</span>\n                  ) : (\n                    <span className=\"text-red-400\">✗ Currently out of stock</span>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Trust Badges */}\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div className=\"flex flex-col items-center gap-2 p-4 rounded-lg bg-cosmic-purple/5\">\n                <Truck className=\"w-6 h-6 text-cosmic-gold\" />\n                <span className=\"text-sm font-medium\">Free Shipping</span>\n                <span className=\"text-xs text-muted-foreground\">Above ₹1000</span>\n              </div>\n              <div className=\"flex flex-col items-center gap-2 p-4 rounded-lg bg-cosmic-purple/5\">\n                <Shield className=\"w-6 h-6 text-cosmic-gold\" />\n                <span className=\"text-sm font-medium\">Authentic</span>\n                <span className=\"text-xs text-muted-foreground\">Guaranteed</span>\n              </div>\n              <div className=\"flex flex-col items-center gap-2 p-4 rounded-lg bg-cosmic-purple/5\">\n                <RotateCcw className=\"w-6 h-6 text-cosmic-gold\" />\n                <span className=\"text-sm font-medium\">7-Day Returns</span>\n                <span className=\"text-xs text-muted-foreground\">Easy process</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Product Details */}\n        <div className=\"mt-16 grid md:grid-cols-2 gap-8\">\n          <Card className=\"border-cosmic-purple/30\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4 text-cosmic-gold\">Product Details</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Category:</span>\n                  <span className=\"capitalize\">{product.category}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Materials:</span>\n                  <span>{product.materials?.join(\", \") || \"Sacred materials\"}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Dimensions:</span>\n                  <span>{product.dimensions || \"Standard size\"}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Weight:</span>\n                  <span>{product.weight || \"Lightweight\"}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-cosmic-purple/30\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4 text-cosmic-gold\">Spiritual Guidance</h3>\n              <div className=\"space-y-3 text-muted-foreground\">\n                <p>This sacred item has been carefully selected for its spiritual properties and cosmic energies.</p>\n                <p>Perfect for meditation, healing practices, and enhancing your spiritual journey.</p>\n                <p className=\"text-cosmic-gold font-medium\">\n                  \"Every celestial treasure carries the wisdom of the universe.\"\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14005}},"version":1}